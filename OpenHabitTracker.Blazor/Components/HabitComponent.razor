@using OpenHabitTracker.Data
@using OpenHabitTracker.Data.Models
@using OpenHabitTracker.Services

@inject HabitService HabitService
@inject SettingsService SettingsService
@inject IStringLocalizer<Loc> Loc

<div>
    <div class="input-group flex-nowrap">
        <PriorityComponent Model="Habit" />
        <InputText class="form-control" Value="@Habit.Title" ValueExpression="() => Habit.Title" ValueChanged="(string title) => SaveTitle(Habit, title)" />
        <button class="btn btn-outline-primary" @onclick="async () => await CloseSelected.InvokeAsync()"><i class="bi bi-floppy"></i></button>
        <button class="btn btn-outline-primary" @onclick="async () => { await HabitService.DeleteHabit(Habit); await CloseSelected.InvokeAsync(); await ContentDeleted.InvokeAsync(); }"><i class="bi bi-trash"></i></button>
        @if (!SettingsService.Settings.ShowLargeCalendar)
        {
            <button class="btn btn-outline-primary" @onclick="() => HabitService.MarkAsDone(Habit)"><i class="bi bi-check-square"></i></button>
        }
    </div>

    <ItemsComponent Items=Habit />

    @if (SettingsService.Settings.ShowLargeCalendar)
    {
        <div class="input-group-text p-0 border-0 rounded-0">
            <div class="mx-auto">
                <CalendarComponent Habit="Habit" HabitChanged="OnHabitChanged" DisplayMonth />
            </div>
        </div>
    }

    <div class="input-group">
        <label class="input-group-text" for="countInput">@Loc["Repeat"]</label>
        <InputNumber class="form-control" id="countInput" Value="Habit.RepeatCount" ValueExpression="() => Habit.RepeatCount" ValueChanged="(int repeatCount) => SaveRepeatCount(Habit, repeatCount)" />

        <label class="input-group-text" for="intervalInput">@Loc["every"]</label>
        <InputNumber class="form-control" id="intervalInput" Value="Habit.RepeatInterval" ValueExpression="() => Habit.RepeatInterval" ValueChanged="(int repeatInterval) => SaveRepeatInterval(Habit, repeatInterval)" />

        <InputSelect class="form-select" Value="Habit.RepeatPeriod" ValueExpression="() => Habit.RepeatPeriod" ValueChanged="(Period repeatPeriod) => SaveRepeatPeriod(Habit, repeatPeriod)">
            @foreach (Period period in Enum.GetValues<Period>())
            {
                <option @key="period" value="@period">@Loc[period.ToString()]</option>
            }
        </InputSelect>
    </div>

    <div class="input-group">
        <label class="input-group-text" for="durationInput">@Loc["Duration"]</label>
        <InputDate class="form-control" id="durationInput" Value="Habit.DurationProxy" ValueExpression="() => Habit.DurationProxy" ValueChanged="(TimeOnly duration) => SaveDuration(Habit, duration)" Type="InputDateType.Time" />
    </div>

    <div class="input-group flex-nowrap">
        @if (_timer is null)
        {
            <span class="input-group-text flex-grow-1">@Loc["Start timer"]</span>
            <button class="btn btn-outline-primary" @onclick="StartTimer"><i class="bi bi-play"></i></button>
        }
        else
        {
            <span class="input-group-text flex-grow-1">@_elapsedTime.ToString(@"hh\:mm\:ss")</span>
            <button class="btn btn-outline-primary" @onclick="ResetTimer"><i class="bi bi-arrow-counterclockwise"></i></button>
            if (_isPaused)
            {
                <button class="btn btn-outline-primary" @onclick="ResumeTimer"><i class="bi bi-play"></i></button>
            }
            else
            {
                <button class="btn btn-outline-primary" @onclick="PauseTimer"><i class="bi bi-pause"></i></button>
            }
            <button class="btn btn-outline-primary" @onclick="StopTimer"><i class="bi bi-stop"></i></button>
        }
    </div>

    <div class="p-1 border rounded-0">
        <div>@Loc["Total time spent"]: @ToReadableString(Habit.TotalTimeSpent)</div>
        <div>@Loc["Average time spent"]: @ToReadableString(Habit.AverageTimeSpent)</div>

        <div>@Loc["Repeat interval"]: @ToReadableString(Habit.GetRepeatInterval())</div>
        <div>@Loc["Repeat interval ratio"]: @Habit.ElapsedTimeToRepeatIntervalRatio.ToString("N0")%</div>
        @if (Habit.ElapsedTimeToRepeatIntervalRatio > 100.0)
        {
            <div>@Loc["Repeat interval overdue"]: @ToReadableString(Habit.ElapsedTime - Habit.GetRepeatInterval())</div>
        }

        <div>@Loc["Average interval"]: @ToReadableString(Habit.AverageInterval)</div>
        <div>@Loc["Average interval ratio"]: @Habit.ElapsedTimeToAverageIntervalRatio.ToString("N0")%</div>
        @if (Habit.ElapsedTimeToAverageIntervalRatio > 100.0)
        {
            <div>@Loc["Average interval overdue"]: @ToReadableString(Habit.ElapsedTime - Habit.AverageInterval)</div>
        }
        
        <div>@Loc["Average interval to repeat interval ratio"]: @Habit.AverageIntervalToRepeatIntervalRatio.ToString("N0")%</div>
    </div>

    @if (Habit.TimesDone is not null && Habit.LastTimeDoneAt is not null)
    {
        <div class="p-1 border rounded-0">
            <small>@Loc["Completed"] @Habit.TimesDone.Count @Loc["times, last time on"] @Habit.LastTimeDoneAt</small>
        </div>
    }

    <div class="input-group flex-nowrap">
        <span class="input-group-text col-4">@Loc["Color"]</span>
        <ColorComponent Model="Habit" />
    </div>

    <div class="input-group flex-nowrap">
        <span class="input-group-text col-4">@Loc["Category"]</span>
        <CategoryComponent Model="Habit" />
    </div>

    <div class="p-1 border rounded-0">
        <small class="d-inline-block mx-1">@Loc["Created"]: @Habit.CreatedAt</small>
        <small class="d-inline-block mx-1">@Loc["Updated"]: @Habit.UpdatedAt</small>
    </div>
</div>

@code {
    [EditorRequired]
    [Parameter]
    public HabitModel Habit { get; set; } = null!;

    [Parameter]
    public EventCallback<HabitModel?> HabitChanged { get; set; }

    [Parameter]
    public EventCallback CloseSelected { get; set; }

    [CascadingParameter(Name = "ContentDeleted")]
    public EventCallback ContentDeleted { get; set; }

    PeriodicTimer? _timer;
    DateTime _taskStartedTime;
    TimeSpan _elapsedTime;
    TimeSpan _previouslyElapsedTime;
    bool _isPaused;

    async Task OnHabitChanged()
    {
        await HabitChanged.InvokeAsync(Habit);
    }

    async Task StartTimer()
    {
        if (Habit is null)
            return;

        TimeSpan? duration = Habit.Duration?.ToTimeSpan();

        await HabitService.Start(Habit);

        ResetTimer();

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        while (_timer is not null && await _timer.WaitForNextTickAsync())
        {
            if (!_isPaused)
            {
                _elapsedTime = DateTime.Now - _taskStartedTime;

                if (duration is not null && _elapsedTime >= duration)
                {
                    await StopTimer();
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    void ResetTimer()
    {
        _elapsedTime = TimeSpan.Zero;
        _previouslyElapsedTime = TimeSpan.Zero;

        ResumeTimer();
    }

    void PauseTimer()
    {
        _previouslyElapsedTime = _elapsedTime;
        _isPaused = true;
    }

    void ResumeTimer()
    {
        _taskStartedTime = DateTime.Now - _previouslyElapsedTime;
        _isPaused = false;
    }

    async Task StopTimer()
    {
        if (Habit is null || _timer is null)
            return;

        if (_isPaused)
            ResumeTimer();

        await HabitService.SetStartTime(Habit, _taskStartedTime);

        await HabitService.MarkAsDone(Habit);

        _timer.Dispose();
        _timer = null;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    async Task SaveTitle(HabitModel habit, string title)
    {
        habit.Title = title;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatCount(HabitModel habit, int repeatCount)
    {
        habit.RepeatCount = repeatCount;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatInterval(HabitModel habit, int repeatInterval)
    {
        habit.RepeatInterval = repeatInterval;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatPeriod(HabitModel habit, Period repeatPeriod)
    {
        habit.RepeatPeriod = repeatPeriod;

        await HabitService.UpdateHabit();
    }

    async Task SaveDuration(HabitModel habit, TimeOnly duration)
    {
        habit.DurationProxy = duration;

        await HabitService.UpdateHabit();
    }

    string ToReadableString(TimeSpan span)
    {
        string readableString = span.TotalMinutes >= 1.0 ? (
            (span.Days > 0 ? span.Days + " d" + (span.Hours > 0 || span.Minutes > 0 ? ", " : string.Empty) : string.Empty) +
            (span.Hours > 0 ? span.Hours + " h" + (span.Minutes > 0 ? ", " : string.Empty) : string.Empty) +
            (span.Minutes > 0 ? span.Minutes + " m" : string.Empty)
            ) : "0 " + "m";

        return readableString;
    }
}
