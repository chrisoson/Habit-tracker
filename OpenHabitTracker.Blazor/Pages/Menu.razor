@page "/menu"

@inject IStringLocalizer<Loc> Loc

@* <PageTitle>OpenHabitTracker - Menu</PageTitle> *@

<div>

    <div class="my-1">

        <div class="list-group">
            @if (WindowDimensions?.Width >= 1280 || WindowDimensions?.Width < 768)
            {
            <NavLink class="list-group-item list-group-item-action" href="/" @onclick="CloseMenu" Match=NavLinkMatch.All>@Loc["Notes, Tasks, Habits"]</NavLink>
            }
            <NavLink class="list-group-item list-group-item-action" href="notes" @onclick="CloseMenu">@Loc["Notes"]</NavLink>
            <NavLink class="list-group-item list-group-item-action" href="tasks" @onclick="CloseMenu">@Loc["Tasks"]</NavLink>
            <NavLink class="list-group-item list-group-item-action" href="habits" @onclick="CloseMenu">@Loc["Habits"]</NavLink>
            <NavLink class="list-group-item list-group-item-action" href="about" @onclick="CloseMenu">@Loc["About"]</NavLink>

            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Trash>">@Loc["Trash"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Search>">@Loc["Search, Filter, Sort"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Settings>">@Loc["Settings"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Categories>">@Loc["Categories"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Priorities>">@Loc["Priorities"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Backup>">@Loc["Backup"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Data>">@Loc["Data"]</button>
            <button class="list-group-item list-group-item-action" @onclick="SelectComponent<Help>">@Loc["Help"]</button>
        </div>

    </div>

</div>

@code {
    [Parameter]
    public Type? DynamicComponentType { get; set; }

    [Parameter]
    public EventCallback<Type?> DynamicComponentTypeChanged { get; set; }

    [Parameter]
    public Dimensions? WindowDimensions { get; set; }

    async Task SelectComponent<T>()
    {
        DynamicComponentType = typeof(T);

        await DynamicComponentTypeChanged.InvokeAsync(DynamicComponentType);
    }

    async Task CloseMenu()
    {
        if (WindowDimensions?.Width < 768)
        {
            DynamicComponentType = null;

            await DynamicComponentTypeChanged.InvokeAsync(DynamicComponentType);
        }
    }
}
