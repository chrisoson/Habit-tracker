@page "/categories"
@page "/categories/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject CategoryService CategoryService

<PageTitle>Categories</PageTitle>

<div class="col mh-100 overflow-auto px-0 px-md-1">

    <div class="my-1">
        @if (CategoryService.NewCategory is not null)
        {
            <form @onsubmit=AddNewCategory>
                <div class="input-group">
                    <InputTextImmediate class="form-control" @bind-Value="CategoryService.NewCategory.Title" placeholder="Add new category" />

                    <button class="btn btn-outline-primary" @onclick="() => CategoryService.AddCategory()" disabled="@string.IsNullOrWhiteSpace(CategoryService.NewCategory.Title)"><i class="bi bi-plus-square"></i></button>
                </div>
            </form>
        }
    </div>

    @if (CategoryService.Categories is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (CategoryModel category in CategoryService.Categories)
        {
            <div class="input-group flex-nowrap">
                @if (category == CategoryService.SelectedCategory)
                {
                    <InputText class="form-control" @ref="inputElement" Value="@category.Title" ValueExpression="() => category.Title" ValueChanged="(string title) => CategoryService.UpdateCategory(title)" @onfocusout="(args) => CategoryService.SelectedCategory = null" />
                }
                else
                {
                    <span class="input-group-text flex-grow-1 text-wrap" @onclick="() => { CategoryService.SelectedCategory = category; shouldFocus = true; }">@category.Title</span>
                }
                <button class="btn btn-outline-primary" @onclick="() => CategoryService.DeleteCategory(category)"><i class="bi bi-trash"></i></button>
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    InputText? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.Initialize();
    }

    protected override void OnParametersSet()
    {
        CategoryService.SetSelectedCategory(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }

    async Task AddNewCategory()
    {
        if (CategoryService.NewCategory is not null && !string.IsNullOrWhiteSpace(CategoryService.NewCategory.Title))
        {
            await CategoryService.AddCategory();
        }
    }
}
