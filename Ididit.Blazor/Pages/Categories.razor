@page "/categories"
@page "/categories/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject CategoryService CategoryService

<PageTitle>Categories</PageTitle>

@if (CategoryService.NewCategory is not null)
{
    <div>
        <InputText @bind-Value="CategoryService.NewCategory.Title" placeholder="Title" />

        <button @onclick="() => CategoryService.AddCategory()"><i class="bi bi-plus-square"></i></button>
    </div>
}

@if (CategoryService.Categories is null)
{
    <p>Loading...</p>
}
else
{
    foreach (CategoryModel category in CategoryService.Categories.Values)
    {
        <div>
            @if (category == CategoryService.SelectedCategory)
            {
                <InputText @ref="inputElement" Value="@category.Title" ValueExpression="() => category.Title" ValueChanged="(string title) => CategoryService.UpdateCategory(title)" @onfocusout="(args) => CategoryService.SelectedCategory = null" />
            }
            else
            {
                <span @onclick="() => { CategoryService.SelectedCategory = category; shouldFocus = true; }">@category.Title</span>
            }
            <button @onclick="() => CategoryService.DeleteCategory(category)"><i class="bi bi-trash"></i></button>
        </div>
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    InputText? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.Initialize();
    }

    protected override void OnParametersSet()
    {
        CategoryService.SetSelectedCategory(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }
}
