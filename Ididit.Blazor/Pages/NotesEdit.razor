@page "/notes/add"
@page "/notes/{Id:long}/update"

@using Ididit.Data.Models
@using Ididit.Services

@inject NoteService NoteService
@inject JsInterop JsInterop

<PageTitle>Notes</PageTitle>

<div class="col mh-100 overflow-auto px-1">

    @if (NoteService.EditNote is not null)
    {
        <div class="bg-body-tertiary my-1 p-1">
            <div class="input-group">
                <PriorityComponent Model="NoteService.EditNote" />

                <InputTextImmediate class="form-control" @bind-Value="NoteService.EditNote.Title" placeholder="Add new note" />

                <button class="btn btn-outline-primary" @onclick="SaveNote" disabled="@string.IsNullOrWhiteSpace(NoteService.EditNote.Title)"><i class="bi bi-floppy"></i></button>
            </div>

            <InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" @bind-Value="NoteService.EditNote.Content" placeholder="Add note text" />

            <CategoryComponent Model="NoteService.EditNote" />
        </div>
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    InputTextArea? _inputTextAreaReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_inputTextAreaReference?.Element is not null)
            await JsInterop.HandleTabKey(_inputTextAreaReference.Element.Value);
    }

    protected override void OnParametersSet()
    {
        if (Id is null)
            NoteService.EditNote = new();
        else
            NoteService.EditNote = NoteService.Notes?.FirstOrDefault(n => n.Id == Id);
    }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private async Task SaveNote()
    {
        if (Id is null)
            await NoteService.AddNote();
        else
            await NoteService.UpdateNote();

        NavigationManager?.NavigateTo("/notes");
    }
}