@page "/trash"

@using Ididit.Data.Models
@using Ididit.Services

@inject TrashService TrashService

<PageTitle>Trash</PageTitle>

<div>

    <div class="my-1">

        <div class="list-group">
            <button class="list-group-item list-group-item-action" @onclick="RestoreAll">Restore all</button>
            <button class="list-group-item list-group-item-action" @onclick="EmptyTrash">Empty trash</button>
        </div>

    </div>

    @if (TrashService.Models is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (InfoModel model in TrashService.Models)
        {
            <div class="input-group flex-nowrap">
                <span class="input-group-text flex-grow-1 text-wrap">@model.Title</span>
                <button class="btn btn-outline-primary" @onclick="() => Restore(model)">Restore</button>
                <button class="btn btn-outline-primary" @onclick="() => Delete(model)"><i class="bi bi-trash"></i></button>
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TrashService.Initialize();
    }

    async Task OnStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task RestoreAll()
    {
        await TrashService.RestoreAll();

        await OnStateChanged();
    }

    async Task EmptyTrash()
    {
        await TrashService.EmptyTrash();

        await OnStateChanged();
    }

    async Task Restore(InfoModel model)
    {
        await TrashService.Restore(model);

        await OnStateChanged();
    }

    async Task Delete(InfoModel model)
    {
        await TrashService.Delete(model);

        await OnStateChanged();
    }
}
