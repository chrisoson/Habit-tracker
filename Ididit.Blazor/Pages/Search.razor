@page "/search"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject SettingsService SettingsService
@inject CategoryService CategoryService
@inject SearchFilterService SearchFilterService

<PageTitle>Search</PageTitle>

<div>
    @if (CategoryService.Categories is null)
    {
        <p>Failed to load. Try refreshing.</p>
    }
    else
    {
        <div class="my-1">

            <div class="input-group flex-nowrap">
                <InputTextImmediate class="form-control" Value="@SearchFilterService.SearchTerm" ValueExpression="() => SearchFilterService.SearchTerm" ValueChanged="UpdateSearchTerm" placeholder="Search" />
                @if (SearchFilterService.MatchCase)
                {
                    <button class="btn btn-primary" @onclick="() => UpdateMatchCase(false)"><i class="bi bi-type"></i></button>
                }
                else
                {
                    <button class="btn btn-outline-primary" @onclick="() => UpdateMatchCase(true)"><i class="bi bi-type"></i></button>
                }
                <button class="btn btn-outline-primary" @onclick="() => UpdateSearchTerm(null)"><i class="bi bi-x-square"></i></button>
            </div>

            <div class="input-group flex-nowrap">
                <button class="input-group-text col-4" @onclick="() => UpdatePlannedAtFilter(DateTime.Today)">Planned</button>
                <InputSelect class="form-control w-auto flex-grow-0" Value="SearchFilterService.PlannedAtCompare" ValueExpression="() => SearchFilterService.PlannedAtCompare" TValue="DateCompare" ValueChanged="UpdatePlannedAtCompare">
                    <option value="@DateCompare.Before">@("<")</option>
                    <option value="@DateCompare.On">@("=")</option>
                    <option value="@DateCompare.After">@(">")</option>
                </InputSelect>
                <InputDate class="form-control" Value="SearchFilterService.PlannedAtFilter" ValueExpression="() => SearchFilterService.PlannedAtFilter" TValue="DateTime?" ValueChanged="UpdatePlannedAtFilter" Type="InputDateType.Date" />
                <button class="btn btn-outline-primary" @onclick="() => UpdatePlannedAtFilter(null)"><i class="bi bi-x-square"></i></button>
            </div>

            <div class="input-group flex-nowrap">
                <button class="input-group-text col-4" @onclick="() => UpdateDoneAtFilter(DateTime.Today)">Done</button>
                <InputSelect class="form-control w-auto flex-grow-0" Value="SearchFilterService.DoneAtCompare" ValueExpression="() => SearchFilterService.DoneAtCompare" TValue="DateCompare" ValueChanged="UpdateDoneAtCompare">
                    <option value="@DateCompare.Before">@("<")</option>
                    <option value="@DateCompare.On">@("=")</option>
                    <option value="@DateCompare.After">@(">")</option>
                </InputSelect>
                <InputDate class="form-control" Value="SearchFilterService.DoneAtFilter" ValueExpression="() => SearchFilterService.DoneAtFilter" TValue="DateTime?" ValueChanged="UpdateDoneAtFilter" Type="InputDateType.Date" />
                <button class="btn btn-outline-primary" @onclick="() => UpdateDoneAtFilter(null)"><i class="bi bi-x-square"></i></button>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Category</span>
                <InputSelect class="form-select col-8" Value="_settings.SelectedCategoryId" ValueExpression="() => _settings.SelectedCategoryId" TValue="long" ValueChanged="SaveCategory">
                    <option value="0" selected>All</option>
                    @foreach (CategoryModel category in CategoryService.Categories)
                    {
                        <option @key="category" value="@category.Id">@category.Title</option>
                    }
                </InputSelect>
            </div>

            @*
            @foreach (Priority priority in Enum.GetValues<Priority>())
            {
                <div class="input-group flex-nowrap">
                    <div class="input-group-text">
                        <InputCheckbox id="@priority" class="form-check-input mt-0" Value="_settings.ShowPriority[priority]" ValueExpression="() => _settings.ShowPriority[priority]" ValueChanged="(bool show) => SaveShowPriority(priority, show)" />
                    </div>
                    <label for="@priority" class="input-group-text flex-grow-1 text-wrap">Show @priority</label>
                </div>
            }
            *@

            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.None" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.None]" ValueExpression="() => _settings.ShowPriority[Priority.None]" ValueChanged="(bool show) => SaveShowPriority(Priority.None, show)" />
                </div>
                <label for="Priority.None" class="input-group-text flex-grow-1 text-wrap">Show no priority</label>
            </div>
            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.VeryLow" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.VeryLow]" ValueExpression="() => _settings.ShowPriority[Priority.VeryLow]" ValueChanged="(bool show) => SaveShowPriority(Priority.VeryLow, show)" />
                </div>
                <label for="Priority.VeryLow" class="input-group-text flex-grow-1 text-wrap">Show very low priority</label>
            </div>
            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.Low" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.Low]" ValueExpression="() => _settings.ShowPriority[Priority.Low]" ValueChanged="(bool show) => SaveShowPriority(Priority.Low, show)" />
                </div>
                <label for="Priority.Low" class="input-group-text flex-grow-1 text-wrap">Show low priority</label>
            </div>
            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.Medium" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.Medium]" ValueExpression="() => _settings.ShowPriority[Priority.Medium]" ValueChanged="(bool show) => SaveShowPriority(Priority.Medium, show)" />
                </div>
                <label for="Priority.Medium" class="input-group-text flex-grow-1 text-wrap">Show medium priority</label>
            </div>
            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.High" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.High]" ValueExpression="() => _settings.ShowPriority[Priority.High]" ValueChanged="(bool show) => SaveShowPriority(Priority.High, show)" />
                </div>
                <label for="Priority.High" class="input-group-text flex-grow-1 text-wrap">Show high priority</label>
            </div>
            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="Priority.VeryHigh" class="form-check-input mt-0" Value="_settings.ShowPriority[Priority.VeryHigh]" ValueExpression="() => _settings.ShowPriority[Priority.VeryHigh]" ValueChanged="(bool show) => SaveShowPriority(Priority.VeryHigh, show)" />
                </div>
                <label for="Priority.VeryHigh" class="input-group-text flex-grow-1 text-wrap">Show very high priority</label>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Ratio</span>
                <InputSelect class="form-select col-8" Value="_settings.SelectedRatio" ValueExpression="() => _settings.SelectedRatio" TValue="Ratio" ValueChanged="SaveSelectedRatio">
                    <option value="@Ratio.ElapsedToAverage">Elapsed time to average interval</option>
                    <option value="@Ratio.ElapsedToDesired">Elapsed time to repeat interval</option>
                    <option value="@Ratio.AverageToDesired">Average interval to repeat interval</option>
                </InputSelect>
            </div>

            <div class="input-group flex-nowrap">
                <div class="input-group-text">
                    <InputCheckbox id="ShowItemList" class="form-check-input mt-0" Value="_settings.ShowOnlyOverSelectedRatioMin" ValueExpression="() => _settings.ShowOnlyOverSelectedRatioMin" ValueChanged="SaveShowOnlyOverSelectedRatioMin" />
                </div>
                <label for="ShowItemList" class="input-group-text flex-grow-1 text-wrap">Show only habits with ratio over @_settings.SelectedRatioMin%</label>
            </div>

            <div class="input-group flex-nowrap">
                <div class="input-group-text flex-grow-1">
                    <input type="range" class="form-range" value="@_settings.SelectedRatioMin" @oninput="(ChangeEventArgs args) => SaveSelectedRatioMin(Convert.ToInt32(args.Value))">
                </div>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Sort notes</span>
                <InputSelect class="form-select col-8" Value="_settings.SortBy[ContentType.Note]" ValueExpression="() => _settings.SortBy[ContentType.Note]" ValueChanged="(Sort sort) => SaveSort(ContentType.Note, sort)">
                    <option value="@Sort.Category">Category</option>
                    <option value="@Sort.Priority">Priority</option>
                    <option value="@Sort.Title">Title</option>
                </InputSelect>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Sort tasks</span>
                <InputSelect class="form-select col-8" Value="_settings.SortBy[ContentType.Task]" ValueExpression="() => _settings.SortBy[ContentType.Task]" ValueChanged="(Sort sort) => SaveSort(ContentType.Task, sort)">
                    <option value="@Sort.Category">Category</option>
                    <option value="@Sort.Priority">Priority</option>
                    <option value="@Sort.Title">Title</option>
                    <option value="@Sort.Duration">Duration</option>
                    <option value="@Sort.ElapsedTime">Elapsed time</option>
                    <option value="@Sort.PlannedAt">Planned at</option>
                    <option value="@Sort.TimeSpent">Time spent</option>
                </InputSelect>
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Sort habits</span>
                <InputSelect class="form-select col-8" Value="_settings.SortBy[ContentType.Habit]" ValueExpression="() => _settings.SortBy[ContentType.Habit]" ValueChanged="(Sort sort) => SaveSort(ContentType.Habit, sort)">
                    <option value="@Sort.Category">Category</option>
                    <option value="@Sort.Priority">Priority</option>
                    <option value="@Sort.Title">Title</option>
                    <option value="@Sort.Duration">Duration</option>
                    <option value="@Sort.RepeatInterval">Repeat interval</option>
                    <option value="@Sort.AverageInterval">Average interval</option>
                    <option value="@Sort.TimeSpent">Time spent</option>
                    <option value="@Sort.AverageTimeSpent">Average time spent</option>
                    <option value="@Sort.ElapsedTime">Elapsed time</option>
                    <option value="@Sort.SelectedRatio">Selected ratio</option>
                </InputSelect>
            </div>

        </div>
    }
</div>

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    SettingsModel _settings => SettingsService.Settings;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();

        await CategoryService.Initialize();
    }

    async Task UpdateStateChanged()
    {
        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task UpdateSettings()
    {
        await SettingsService.UpdateSettings();

        await UpdateStateChanged();
    }

    async Task UpdateSearchTerm(string? searchTerm)
    {
        SearchFilterService.SearchTerm = searchTerm;
        await UpdateStateChanged();
    }

    async Task UpdateMatchCase(bool matchCase)
    {
        SearchFilterService.MatchCase = matchCase;
        await UpdateStateChanged();
    }

    async Task UpdatePlannedAtCompare(DateCompare plannedAtCompare)
    {
        SearchFilterService.PlannedAtCompare = plannedAtCompare;
        await UpdateStateChanged();
    }

    async Task UpdatePlannedAtFilter(DateTime? plannedAtFilter)
    {
        SearchFilterService.PlannedAtFilter = plannedAtFilter;
        await UpdateStateChanged();
    }

    async Task UpdateDoneAtCompare(DateCompare doneAtCompare)
    {
        SearchFilterService.DoneAtCompare = doneAtCompare;
        await UpdateStateChanged();
    }

    async Task UpdateDoneAtFilter(DateTime? doneAtFilter)
    {
        SearchFilterService.DoneAtFilter = doneAtFilter;
        await UpdateStateChanged();
    }

    async Task SaveCategory(long categoryId)
    {
        _settings.SelectedCategoryId = categoryId;

        await UpdateSettings();
    }

    async Task SaveSelectedRatio(Ratio ratio)
    {
        _settings.SelectedRatio = ratio;

        await UpdateSettings();
    }

    async Task SaveShowOnlyOverSelectedRatioMin(bool show)
    {
        _settings.ShowOnlyOverSelectedRatioMin = show;

        await UpdateSettings();
    }

    async Task SaveSelectedRatioMin(int min)
    {
        _settings.SelectedRatioMin = min;

        await UpdateSettings();
    }

    async Task SaveShowPriority(Priority priority, bool show)
    {
        _settings.ShowPriority[priority] = show;

        await UpdateSettings();
    }

    async Task SaveSort(ContentType contentType, Sort sort)
    {
        _settings.SortBy[contentType] = sort;

        await UpdateSettings();
    }
}
