@page "/search"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject SettingsService SettingsService
@inject CategoryService CategoryService

<PageTitle>Search</PageTitle>

<div class="col-auto mh-100 overflow-auto px-0 px-md-1">
    <div class="my-1">

        <InputSelect class="form-select" Value="_settings.SelectedCategoryId" ValueExpression="() => _settings.SelectedCategoryId" ValueChanged="(long categoryId) => SaveCategory(categoryId)">
            <option value="0" disabled selected hidden>None</option>
            @foreach (CategoryModel category in CategoryService.Categories!)
            {
                <option @key="category" value="@category.Id">@category.Title</option>
            }
        </InputSelect>

        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="ShowItemList" class="form-check-input mt-0" Value="_settings.ShowOnlyOverElapsedTimeToRepeatIntervalRatioMin" ValueExpression="() => _settings.ShowOnlyOverElapsedTimeToRepeatIntervalRatioMin" ValueChanged="(bool show) => SaveShowOnlyOverElapsedTimeToRepeatIntervalRatioMin(show)" />
            </div>
            <label for="ShowItemList" class="input-group-text flex-grow-1 text-wrap">Show item list</label>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text">Sort notes by</span>
            <InputSelect class="form-select" Value="_settings.SortBy[InfoType.Note]" ValueExpression="() => _settings.SortBy[InfoType.Note]" ValueChanged="(Sort sort) => SaveSort(InfoType.Note, sort)">
                <option value="@Sort.Category">Category</option>
                <option value="@Sort.Priority">Priority</option>
                <option value="@Sort.Title">Title</option>
            </InputSelect>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text">Sort tasks by</span>
            <InputSelect class="form-select" Value="_settings.SortBy[InfoType.Task]" ValueExpression="() => _settings.SortBy[InfoType.Task]" ValueChanged="(Sort sort) => SaveSort(InfoType.Task, sort)">
                <option value="@Sort.Category">Category</option>
                <option value="@Sort.Priority">Priority</option>
                <option value="@Sort.Title">Title</option>
                <option value="@Sort.ElapsedTime">Elapsed time</option>
            </InputSelect>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text">Sort habits by</span>
            <InputSelect class="form-select" Value="_settings.SortBy[InfoType.Habit]" ValueExpression="() => _settings.SortBy[InfoType.Habit]" ValueChanged="(Sort sort) => SaveSort(InfoType.Habit, sort)">
                <option value="@Sort.Category">Category</option>
                <option value="@Sort.Priority">Priority</option>
                <option value="@Sort.Title">Title</option>
                <option value="@Sort.Duration">Duration</option>
                <option value="@Sort.RepeatInterval">Repeat interval</option>
                <option value="@Sort.ElapsedTime">Elapsed time</option>
                <option value="@Sort.ElapsedTimeToRepeatIntervalRatio">Elapsed time to repeat interval ratio</option>
            </InputSelect>
        </div>

    </div>
</div>

@code {
    SettingsModel _settings => SettingsService.Settings;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();

        await CategoryService.Initialize();
    }

    async Task SaveCategory(long categoryId)
    {
        _settings.SelectedCategoryId = categoryId;

        await SettingsService.UpdateSettings();
    }

    async Task SaveShowOnlyOverElapsedTimeToRepeatIntervalRatioMin(bool show)
    {
        _settings.ShowOnlyOverElapsedTimeToRepeatIntervalRatioMin = show;

        await SettingsService.UpdateSettings();
    }

    async Task SaveSort(InfoType infoType, Sort sort)
    {
        _settings.SortBy[infoType] = sort;

        await SettingsService.UpdateSettings();
    }
}
