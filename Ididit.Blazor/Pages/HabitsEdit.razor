@page "/habits/add"
@page "/habits/{Id:long}/update"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject HabitService HabitService

<PageTitle>Habits</PageTitle>

<div class="col mh-100 overflow-auto px-0 px-md-1">

    @if (HabitService.EditHabit is not null)
    {
        <div class="bg-body-tertiary my-1 py-1 px-0 px-md-1">
            <div class="input-group">
                <PriorityComponent Model="HabitService.EditHabit" />

                <InputTextImmediate class="form-control" @bind-Value="HabitService.EditHabit.Title" placeholder="Add new habit" />

                <button class="btn btn-outline-primary" @onclick="SaveHabit" disabled="@string.IsNullOrWhiteSpace(HabitService.EditHabit.Title)"><i class="bi bi-floppy"></i></button>
            </div>

            <div class="input-group">
                <label class="input-group-text" for="countInput">Repeat</label>
                <InputNumber class="form-control" id="countInput" @bind-Value="HabitService.EditHabit.RepeatCount" />

                <label class="input-group-text" for="intervalInput">every</label>
                <InputNumber class="form-control" id="intervalInput" @bind-Value="HabitService.EditHabit.RepeatInterval" />

                <InputSelect class="form-select" @bind-Value="HabitService.EditHabit.RepeatPeriod">
                    @foreach (Period period in Enum.GetValues<Period>())
                    {
                        <option @key="period" value="@period">@period</option>
                    }
                </InputSelect>
            </div>

            <div class="input-group">
                <label class="input-group-text" for="durationInput">Duration</label>
                <InputDate class="form-control" id="durationInput" @bind-Value="HabitService.EditHabit.DurationProxy" Type="InputDateType.Time" />
            </div>

            <CategoryComponent Model="HabitService.EditHabit" />
        </div>
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override void OnParametersSet()
    {
        if (Id is null)
            HabitService.EditHabit = new();
        else
            HabitService.EditHabit = HabitService.Habits?.FirstOrDefault(h => h.Id == Id);
    }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private async Task SaveHabit()
    {
        if (Id is null)
            await HabitService.AddHabit();
        else
            await HabitService.UpdateHabit();

        NavigationManager?.NavigateTo("/habits");
    }
}