@page "/habits/{Id:long}/update"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject HabitService HabitService

<PageTitle>HabitsUpdate</PageTitle>

@if (HabitService.EditHabit is not null)
{
    <div class="bg-body-tertiary my-1 p-1">
        <div>
            <InputTextImmediate @bind-Value="HabitService.EditHabit.Title" placeholder="Title" />

            <button @onclick="UpdateHabit" disabled="@string.IsNullOrWhiteSpace(HabitService.EditHabit.Title)"><i class="bi bi-floppy"></i></button>
        </div>

        <CategoryComponent Model="HabitService.EditHabit" />

        <PriorityComponent Model="HabitService.EditHabit" />

        <div>
            <label for="countInput">Repeat</label>
            <InputNumber id="countInput" @bind-Value="HabitService.EditHabit.RepeatCount" />

            <label for="intervalInput">times every</label>
            <InputNumber id="intervalInput" @bind-Value="HabitService.EditHabit.RepeatInterval" />

            <InputSelect @bind-Value="HabitService.EditHabit.RepeatPeriod">
                @foreach (Period period in Enum.GetValues<Period>())
                {
                    <option value="@period">@period</option>
                }
            </InputSelect>
        </div>

        <div>
            <label for="durationInput">Duration</label>
            <InputDate id="durationInput" @bind-Value="HabitService.EditHabit.Duration" Type="InputDateType.Time" />
        </div>
    </div>
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override void OnParametersSet()
    {
        HabitService.EditHabit = HabitService.Habits?.FirstOrDefault(h => h.Id == Id);
    }

    [Inject]
    private NavigationManager? NavigationManager { get; set; }

    private async Task UpdateHabit()
    {
        await HabitService.UpdateHabit();

        NavigationManager?.NavigateTo("/habits");
    }
}