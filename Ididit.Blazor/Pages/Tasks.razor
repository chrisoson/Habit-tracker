@page "/tasks"
@page "/tasks/{Id:long}"

@using Ididit.Blazor.Components
@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject TaskService TaskService
@inject AppData AppData

<PageTitle>Tasks</PageTitle>

<div class="col mh-100 overflow-auto">

    <NavLink class="input-group text-decoration-none my-1 p-1" href="/tasks/add">
        <span class="input-group-text flex-grow-1">Add new task</span>

        <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
    </NavLink>

    @if (TaskService.Tasks is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (TaskModel task in TaskService.Tasks.Where(t => !t.IsDeleted))
        {
            <div class="bg-body-tertiary my-1 p-1">
                @if (task.Id == Id)
                {
                    <div class="input-group flex-nowrap">
                        <PriorityComponent Model="task" />
                        <span class="input-group-text flex-grow-1 text-wrap" @onclick="() => ToggleSelected(task.Id)">@task.Title</span>
                        <NavLink class="btn btn-outline-primary" href="@($"/tasks/{task.Id}/update")"><i class="bi bi-pencil-square"></i></NavLink>
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.DeleteTask(task)"><i class="bi bi-trash"></i></button>
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.MarkAsDone(task)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=task />

                    <div class="input-group">
                        <span class="input-group-text">Planned at</span>
                        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="task.PlannedAt" />
                    </div>

                    if (task.StartedAt is not null)
                    {
                        <small>StartedAt: @task.StartedAt</small>
                    }

                    if (task.CompletedAt is not null)
                    {
                        <small>CompletedAt: @task.CompletedAt</small>
                    }

                    <CategoryComponent Model="task" />

                    <div class="p-1 border" style="border-radius: var(--bs-border-radius)">
                        <small>Created: @task.CreatedAt</small>
                        <small>Updated: @task.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group flex-nowrap">
                        <span class="input-group-text">@AppData.GetPriorityTitle(task.Priority)</span>
                        <span class="input-group-text flex-grow-1 text-wrap" @onclick="() => ToggleSelected(task.Id)">@task.Title</span>
                        @if (task.PlannedAt is not null)
                        {
                            <small class="input-group-text">@(task.PlannedAt.Value.Date == DateTime.Now.Date ? task.PlannedAt.Value.ToShortTimeString() : task.PlannedAt.Value.ToShortDateString())</small>
                        }
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.MarkAsDone(task)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=task IsReadOnly=true />
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TaskService.Initialize();
    }

    protected override void OnParametersSet()
    {
        TaskService.SetSelectedTask(Id);
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
                Id = null;
            else
                Id = id;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/tasks");
            else
                NavigationManager.NavigateTo($"/tasks/{id}");
        }
    }
}
