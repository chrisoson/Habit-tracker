@page "/tasks"
@page "/tasks/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject TaskService TaskService

<PageTitle>Tasks</PageTitle>

<h1>Tasks</h1>

<p><a href="/tasks/add">Add task</a></p>

@if (TaskService.Tasks is null || TaskService.NewTask is null)
{
    <p>Loading...</p>
}
else
{
    <p>Tasks: @TaskService.Tasks.Where(t => !t.IsDeleted).Count()</p>

    foreach (TaskModel task in TaskService.Tasks.Where(t => !t.IsDeleted))
    {
        if (task.Id == Id)
        {
            <p><a href="/tasks">@task.Title</a><button @onclick="() => TaskService.MarkAsDone(task)">Done</button></p>

            <p><a href="/tasks/@task.Id/update">Update</a></p>

            <button @onclick="() => TaskService.DeleteTask(task.Id)">Delete Task</button>

            <p>CreatedAt: @task.CreatedAt</p>
            <p>UpdatedAt: @task.UpdatedAt</p>
            <p>Priority: @task.Priority</p>

            if (task.DoneAt is not null)
            {
                <p>DoneAt: @task.DoneAt</p>
            }
        }
        else
        {
            <p><a href="/tasks/@task.Id">@task.Title</a><button @onclick="() => TaskService.MarkAsDone(task)">Done</button></p>
        }
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TaskService.Initialize();
    }
}
