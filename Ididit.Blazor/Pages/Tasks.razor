@page "/tasks"
@page "/tasks/{Id:long}"

@using Ididit.Blazor.Components
@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject TaskService TaskService
@inject AppData AppData
@inject SettingsService SettingsService

<PageTitle>Tasks</PageTitle>

<div class="col child-column px-0 px-md-1">

    @if (TaskService.NewTask is null)
    {
        <NavLink class="btn input-group d-flex flex-nowrap my-1 p-0" @onclick="() => { TaskService.NewTask = new(); shouldFocus = true; }">
            <span class="input-group-text flex-grow-1">Add new task</span>

            <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
        </NavLink>
    }
    @if (TaskService.NewTask is not null)
    {
        <div class="my-1">
            <div class="input-group">
                <PriorityComponent Model="TaskService.NewTask" />

                <InputTextImmediate class="form-control" @ref="inputElement" @bind-Value="TaskService.NewTask.Title" placeholder="Add new task" />

                <button class="btn btn-outline-primary" @onclick="TaskService.AddTask" disabled="@string.IsNullOrWhiteSpace(TaskService.NewTask.Title)"><i class="bi bi-floppy"></i></button>
                <button class="btn btn-outline-primary" @onclick="() => TaskService.NewTask = null"><i class="bi bi-trash"></i></button>
            </div>

            <div class="input-group">
                <span class="input-group-text">Planned at</span>
                <InputDate class="form-control" Type="InputDateType.DateTimeLocal" @bind-Value="TaskService.NewTask.PlannedAt" />
            </div>

            <CategoryComponent Model="TaskService.NewTask" />
        </div>
    }

    @if (TaskService.Tasks is null)
    {
        <p>Failed to load. Try refreshing.</p>
    }
    else
    {
        foreach (TaskModel task in TaskService.GetTasks())
        {
            <div class="my-1">
                @if (task.Id == Id && TaskService.NewTask is null)
                {
                    <div class="input-group flex-nowrap">
                        <PriorityComponent Model="task" />
                        <InputText class="form-control" Value="@task.Title" ValueExpression="() => task.Title" ValueChanged="(string title) => SaveTitle(task, title)" />
                        <button class="btn btn-outline-primary" @onclick="() => ToggleSelected(task.Id)"><i class="bi bi-floppy"></i></button>
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.DeleteTask(task)"><i class="bi bi-trash"></i></button>
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.MarkAsDone(task)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=task />

                    <div class="input-group">
                        <span class="input-group-text">Planned at</span>
                        <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="task.PlannedAt" ValueExpression="() => task.PlannedAt" ValueChanged="(DateTime? plannedAt) => SavePlannedAt(task, plannedAt)" />
                    </div>

                    @if (task.StartedAt is not null)
                    {
                        <div class="p-1 border rounded-0">
                            @if (task.StartedAt != task.CompletedAt)
                            {
                                <small class="d-inline-block mx-1">Started: @task.StartedAt</small>
                            }
                            @if (task.CompletedAt is not null)
                            {
                                <small class="d-inline-block mx-1">Completed: @task.CompletedAt</small>
                            }
                        </div>
                    }

                    <CategoryComponent Model="task" />

                    <div class="p-1 border rounded-0">
                        <small class="d-inline-block mx-1">Created: @task.CreatedAt</small>
                        <small class="d-inline-block mx-1">Updated: @task.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group flex-nowrap">
                        <span class="input-group-text">@AppData.GetPriorityTitle(task.Priority)</span>
                        <button class="input-group-text flex-grow-1 text-wrap bg-body-secondary" @onclick="() => ToggleSelected(task.Id)">@task.Title</button>
                        @if (task.PlannedAt is not null)
                        {
                            <small class="input-group-text">@(task.PlannedAt.Value.Date == DateTime.Now.Date ? task.PlannedAt.Value.ToShortTimeString() : task.PlannedAt.Value.ToShortDateString())</small>
                        }
                        <button class="btn btn-outline-primary" @onclick="() => TaskService.MarkAsDone(task)"><i class="bi bi-check-square"></i></button>
                    </div>

                    if (SettingsService.Settings.ShowItemList)
                    {
                        <ItemsComponent Items=task IsReadOnly=true />
                    }
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    [CascadingParameter(Name = "StateChanged")]
    public bool StateChanged { get; set; }

    InputTextImmediate? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();

        await TaskService.Initialize();
    }

    protected override void OnParametersSet()
    {
        TaskService.SetSelectedTask(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
            {
                Id = null;
            }
            else
            {
                Id = id;
                TaskService.SetSelectedTask(Id);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/tasks");
            else
                NavigationManager.NavigateTo($"/tasks/{id}");
        }
    }

    async Task SaveTitle(TaskModel task, string title)
    {
        task.Title = title;

        await TaskService.UpdateTask();
    }

    async Task SavePlannedAt(TaskModel task, DateTime? plannedAt)
    {
        task.PlannedAt = plannedAt;

        await TaskService.UpdateTask();
    }
}
