@page "/tasks"
@page "/tasks/{Id:long}"

@using Ididit.Blazor.Components
@using Ididit.Data.Models
@using Ididit.Services

@inject TaskService TaskService

<PageTitle>Tasks</PageTitle>

<p><a href="/tasks/add">Add task</a></p>

@if (TaskService.Tasks is null)
{
    <p>Loading...</p>
}
else
{
    foreach (TaskModel task in TaskService.Tasks.Where(t => !t.IsDeleted))
    {
        if (task.Id == Id)
        {
            <p><a href="/tasks">@task.Title</a><button @onclick="() => TaskService.MarkAsDone(task)">Done</button></p>

            <p><a href="/tasks/@task.Id/update">Update</a></p>

            <button @onclick="() => TaskService.DeleteTask(task)">Delete Task</button>

            <p>CategoryId: @task.CategoryId</p>
            <p>PriorityId: @task.PriorityId</p>

            if (task.Date is not null)
            {
                <p>Date: @task.Date</p>
            }

            if (task.StartedAt is not null)
            {
                <p>StartedAt: @task.StartedAt</p>
            }

            if (task.CompletedAt is not null)
            {
                <p>CompletedAt: @task.CompletedAt</p>
            }

            <ItemsComponent Items=TaskService.SelectedTask />

            <div>
                <small>Created: @task.CreatedAt</small>
                <small>Updated: @task.UpdatedAt</small>
            </div>
        }
        else
        {
            <p><a href="/tasks/@task.Id">@task.Title</a><button @onclick="() => TaskService.MarkAsDone(task)">Done</button></p>
        }
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await TaskService.Initialize();
    }

    protected override void OnParametersSet()
    {
        TaskService.SetSelectedTask(Id);
    }
}
