@page "/priorities"
@page "/priorities/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject PriorityService PriorityService

<PageTitle>Priorities</PageTitle>

<div class="col-auto mh-100 overflow-auto px-0 px-md-1">

    <div class="my-1">
        @if (PriorityService.Priorities is null)
        {
            <p>Loading...</p>
        }
        else
        {
            foreach (PriorityModel priority in PriorityService.Priorities)
            {
                <div class="input-group">
                    @if (priority == PriorityService.SelectedPriority)
                    {
                        <InputText class="form-control" @ref="inputElement" Value="@priority.Title" ValueExpression="() => priority.Title" ValueChanged="(string title) => PriorityService.UpdatePriority(title)" @onfocusout="(args) => PriorityService.SelectedPriority = null" />
                    }
                    else
                    {
                        <button class="input-group-text flex-grow-1" @onclick="() => { PriorityService.SelectedPriority = priority; shouldFocus = true; }">@priority.Title</button>
                    }
                </div>
            }
        }
    </div>

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    InputText? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await PriorityService.Initialize();
    }

    protected override void OnParametersSet()
    {
        PriorityService.SetSelectedPriority(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }
}
