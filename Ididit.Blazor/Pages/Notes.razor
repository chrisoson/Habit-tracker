@page "/notes"
@page "/notes/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NoteService NoteService
@inject AppData AppData

<PageTitle>Notes</PageTitle>

<div class="col mh-100 overflow-auto">

    <NavLink class="input-group text-decoration-none my-1 p-1" href="/notes/add">
        <span class="input-group-text flex-grow-1">Add new note</span>

        <span class="btn btn-primary"><i class="bi bi-plus-square"></i></span>
    </NavLink>

    @if (NoteService.Notes is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (NoteModel note in NoteService.Notes.Where(n => !n.IsDeleted))
        {
            <div class="bg-body-tertiary my-1 p-1">
                @if (note.Id == Id)
                {
                    <div class="input-group">
                        <span class="input-group-text">@AppData.GetPriorityTitle(note.Priority)</span>
                        <span class="input-group-text flex-grow-1" @onclick="() => ToggleSelected(note.Id)">@note.Title</span>
                        <NavLink class="btn btn-primary" href="@($"/notes/{note.Id}/update")"><i class="bi bi-pencil-square"></i></NavLink>
                        <button class="btn btn-primary" @onclick="() => NoteService.DeleteNote(note)"><i class="bi bi-trash"></i></button>
                    </div>

                    <pre class="m-0">@note.Content</pre>

                    <div>
                        <small>Category: @AppData.GetCategoryTitle(note.CategoryId)</small>
                    </div>

                    <div>
                        <small>Created: @note.CreatedAt</small>
                        <small>Updated: @note.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group">
                        <span class="input-group-text">@AppData.GetPriorityTitle(note.Priority)</span>
                        <span class="input-group-text flex-grow-1" @onclick="() => ToggleSelected(note.Id)">@note.Title</span>
                    </div>

                    <pre class="m-0">@note.Content</pre>
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await NoteService.Initialize();
    }

    protected override void OnParametersSet()
    {
        NoteService.SetSelectedNote(Id);
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
                Id = null;
            else
                Id = id;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/notes");
            else
                NavigationManager.NavigateTo($"/notes/{id}");
        }
    }
}
