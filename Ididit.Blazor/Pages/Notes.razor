@page "/notes"
@page "/notes/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject NoteService NoteService
@inject AppData AppData

<PageTitle>Notes</PageTitle>

<div class="fs-1"><a href="/notes/add"><i class="bi bi-plus-square"></i></a></div>

@if (NoteService.Notes is null)
{
    <p>Loading...</p>
}
else
{
    foreach (NoteModel note in NoteService.Notes.Where(n => !n.IsDeleted))
    {
        <div class="bg-body-tertiary my-1 p-1">
            @if (note.Id == Id)
            {
                <p>
                    <span>Priority: @AppData.GetPriorityTitle(note.Priority)</span>
                    <a href="/notes">@note.Title</a>
                    <a href="/notes/@note.Id/update"><i class="bi bi-pencil-square"></i></a>
                    <button @onclick="() => NoteService.DeleteNote(note)"><i class="bi bi-trash"></i></button>
                </p>

                <p>@note.Content</p>

                <div>
                    <small>Category: @AppData.GetCategoryTitle(note.CategoryId)</small>
                </div>

                <div>
                    <small>Created: @note.CreatedAt</small>
                    <small>Updated: @note.UpdatedAt</small>
                </div>
            }
            else
            {
                <p>
                    <span>Priority: @AppData.GetPriorityTitle(note.Priority)</span>
                    <a href="/notes/@note.Id">@note.Title</a>
                </p>

                <div>@note.Content</div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await NoteService.Initialize();
    }

    protected override void OnParametersSet()
    {
        NoteService.SetSelectedNote(Id);
    }
}
