@page "/notes"
@page "/notes/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NoteService NoteService
@inject AppData AppData
@inject JsInterop JsInterop

<PageTitle>Notes</PageTitle>

<div class="col mh-100 overflow-auto px-0 px-md-1">

    @if (NoteService.NewNote is null)
    {
        <button class="btn input-group d-flex flex-nowrap my-1 p-1" @onclick="() => { NoteService.NewNote = new(); shouldFocus = true; }">
            <span class="input-group-text flex-grow-1">Add new note</span>

            <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
        </button>
    }
    @if (NoteService.NewNote is not null)
    {
        <div class="bg-body-tertiary my-1">
            <div class="input-group">
                <PriorityComponent Model="NoteService.NewNote" />

                <InputTextImmediate class="form-control" @ref="inputElement" @bind-Value="NoteService.NewNote.Title" placeholder="Add new note" />

                <button class="btn btn-outline-primary" @onclick="NoteService.AddNote" disabled="@string.IsNullOrWhiteSpace(NoteService.NewNote.Title)"><i class="bi bi-floppy"></i></button>
                <button class="btn btn-outline-primary" @onclick="() => NoteService.NewNote = null"><i class="bi bi-trash"></i></button>
            </div>

            <InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" @bind-Value="NoteService.NewNote.Content" placeholder="Add note text" />

            <CategoryComponent Model="NoteService.NewNote" />
        </div>
    }

    @if (NoteService.Notes is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (NoteModel note in NoteService.GetNotes())
        {
            <div class="bg-body-tertiary my-1">
                @if (note.Id == Id && NoteService.NewNote is null)
                {
                    <div class="input-group flex-nowrap">
                        <PriorityComponent Model="note" />
                        <InputText class="form-control" Value="@note.Title" ValueExpression="() => note.Title" ValueChanged="(string title) => SaveTitle(note, title)" />
                        <button class="btn btn-outline-primary" @onclick="() => ToggleSelected(note.Id)"><i class="bi bi-floppy"></i></button>
                        <button class="btn btn-outline-primary" @onclick="() => NoteService.DeleteNote(note)"><i class="bi bi-trash"></i></button>
                    </div>

                    <InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" Value="@note.Content" ValueExpression="() => note.Content" ValueChanged="(string content) => SaveContent(note, content)" rows="@(note.Content.Count(c => c == '\n') + 1)" placeholder="Add note text" />

                    <CategoryComponent Model="note" />

                    <div class="p-1 border" style="border-radius: var(--bs-border-radius)">
                        <small class="d-inline-block mx-1">Created: @note.CreatedAt</small>
                        <small class="d-inline-block mx-1">Updated: @note.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group flex-nowrap">
                        <span class="input-group-text">@AppData.GetPriorityTitle(note.Priority)</span>
                        <button class="input-group-text flex-grow-1 text-wrap bg-body-secondary" @onclick="() => ToggleSelected(note.Id)">@note.Title</button>
                    </div>

                    <div class="form-control" style="white-space: pre-wrap">@note.Content</div>
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    [CascadingParameter(Name = "StateChanged")]
    public bool StateChanged { get; set; }

    InputTextImmediate? inputElement;

    bool shouldFocus;

    InputTextArea? _inputTextAreaReference;

    protected override async Task OnInitializedAsync()
    {
        await NoteService.Initialize();
    }

    protected override void OnParametersSet()
    {
        NoteService.SetSelectedNote(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }

        if (_inputTextAreaReference?.Element is not null)
            await JsInterop.HandleTabKey(_inputTextAreaReference.Element.Value);
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
            {
                Id = null;
            }
            else
            {
                Id = id;
                NoteService.SetSelectedNote(Id);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/notes");
            else
                NavigationManager.NavigateTo($"/notes/{id}");
        }
    }

    async Task SaveTitle(NoteModel note, string title)
    {
        note.Title = title;

        await NoteService.UpdateNote();
    }

    async Task SaveContent(NoteModel note, string content)
    {
        note.Content = content;

        await NoteService.UpdateNote();
    }
}
