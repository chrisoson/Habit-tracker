@page "/notes"
@page "/notes/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NoteService NoteService
@inject AppData AppData
@inject JsInterop JsInterop
@inject SearchFilterService SearchFilterService
@inject IStringLocalizer<Loc> Loc

<PageTitle>Notes</PageTitle>

<div class="col child-column px-0 px-md-1">

    @if (NoteService.NewNote is null)
    {
        <button class="btn input-group d-flex flex-nowrap my-1 p-0" @onclick="AddNew">
            <span class="input-group-text flex-grow-1">@Loc["Add new note"]</span>

            <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
        </button>
    }
    @if (NoteService.NewNote is not null)
    {
        <div class="my-1">
            <div class="input-group">
                <PriorityComponent Model="NoteService.NewNote" />

                <InputTextImmediate class="form-control" @ref="inputElement" @bind-Value="NoteService.NewNote.Title" placeholder="Add new note" />

                <button class="btn btn-outline-primary" @onclick="NoteService.AddNote" disabled="@string.IsNullOrWhiteSpace(NoteService.NewNote.Title)"><i class="bi bi-floppy"></i></button>
                <button class="btn btn-outline-primary" @onclick="() => NoteService.NewNote = null"><i class="bi bi-trash"></i></button>
            </div>

            <InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" @bind-Value="NoteService.NewNote.Content" placeholder="Add note text" />

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Color</span>
                <ColorComponent Model="NoteService.NewNote" />
            </div>

            <div class="input-group flex-nowrap">
                <span class="input-group-text col-4">Category</span>
                <CategoryComponent Model="NoteService.NewNote" />
            </div>
        </div>
    }

    @if (NoteService.Notes is null)
    {
        <p>Failed to load. Try refreshing.</p>
    }
    else
    {
        foreach (NoteModel note in NoteService.GetNotes())
        {
            <div class="my-1">
                @if (!_showSecondColumn && note.Id == Id && NoteService.NewNote is null)
                {
                    <NoteComponent Note="note" CloseSelected="CloseSelected" />
                }
                else
                {
                    <div class="input-group flex-nowrap">
                        <span class="input-group-text">@AppData.GetPriorityTitle(note.Priority)</span>
                        <button class="@($"input-group-text flex-grow-1 text-wrap {note.Color} highlightable")" @onclick="() => OpenSelected(note.Id)">@((MarkupString)SearchFilterService.MarkSearchResults(note.Title))</button>
                    </div>

                    if (AppData.Settings.DisplayNoteContentAsMarkdown)
                    {
                        <div class="form-control markdown-block-margin" style="min-height: 38px;">@((MarkupString)SearchFilterService.MarkSearchResultsInHtml(note.ContentMarkdown))</div>
                    }
                    else
                    {
                        <div class="form-control" style="white-space: pre-wrap; min-height: 38px;">@((MarkupString)SearchFilterService.MarkSearchResults(note.Content))</div>
                    }
                }
            </div>
        }
    }

</div>

@if (_showSecondColumn)
{
    <div class="col child-column px-0 px-md-1 my-1">
        @if (Id is not null && NoteService.NewNote is null)
        {
            <NoteComponent Note="NoteService.SelectedNote" CloseSelected="CloseSelected" />
        }
    </div>
}

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    [CascadingParameter(Name = "StateChanged")]
    public bool StateChanged { get; set; }

    [CascadingParameter(Name = "WindowDimensions")]
    public Dimensions? WindowDimensions { get; set; }

    bool _showSecondColumn => !IsEmbedded && WindowDimensions?.Width > 700;

    InputTextImmediate? inputElement;

    bool shouldFocus;

    InputTextArea? _inputTextAreaReference;

    protected override async Task OnInitializedAsync()
    {
        await NoteService.Initialize();
    }

    protected override void OnParametersSet()
    {
        NoteService.SetSelectedNote(Id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }

        if (_inputTextAreaReference?.Element is not null)
        {
            if (AppData.Settings.InsertTabsInNoteContent)
                await JsInterop.HandleTabKey(_inputTextAreaReference.Element.Value);

            await JsInterop.SetCalculateAutoHeight(_inputTextAreaReference.Element.Value);
        }
    }

    void AddNew()
    {
        NoteService.NewNote = new() { Color = "bg-body-secondary" };
        shouldFocus = true;
    }

    async Task OpenSelected(long id)
    {
        if (IsEmbedded)
        {
            Id = id;
            NoteService.SetSelectedNote(Id);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            NavigationManager.NavigateTo($"/notes/{id}");
        }
    }

    async Task CloseSelected()
    {
        if (IsEmbedded)
        {
            Id = null;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            NavigationManager.NavigateTo("/notes");
        }
    }
}
