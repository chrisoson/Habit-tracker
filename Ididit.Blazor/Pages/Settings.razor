@page "/settings"

@using Ididit.Data.Models
@using Ididit.Services

@inject SettingsService SettingsService

<PageTitle>Settings</PageTitle>

<div>
    <div class="my-1">

        <div class="input-group flex-nowrap">
            <span class="input-group-text col-6">Start page</span>
            <InputSelect class="form-select col-6" Value="_settings.StartPage" ValueExpression="() => _settings.StartPage" ValueChanged="(string startPage) => SaveStartPage(startPage)">
                <option value="">Notes, Tasks, Habits</option>
                <option value="/notes">Notes</option>
                <option value="/tasks">Tasks</option>
                <option value="/habits">Habits</option>
                <option value="/about">About</option>
            </InputSelect>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text col-6">Start sidebar</span>
            <InputSelect class="form-select col-6" Value="_settings.StartSidebar" ValueExpression="() => _settings.StartSidebar" ValueChanged="(string startSidebar) => SaveStartSidebar(startSidebar)">
                <option value="">None</option>
                <option value="Settings">Settings</option>
                <option value="Data">Data</option>
                <option value="Backup">Backup</option>
                <option value="Search">Search</option>
                <option value="Menu">Menu</option>
                <option value="Categories">Categories</option>
                <option value="Priorities">Priorities</option>
                <option value="Help">Help</option>
                <option value="Trash">Trash</option>
            </InputSelect>
        </div>

        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="ShowItemList" class="form-check-input mt-0" Value="_settings.ShowItemList" ValueExpression="() => _settings.ShowItemList" ValueChanged="(bool show) => SaveShowItemList(show)" />
            </div>
            <label for="ShowItemList" class="input-group-text flex-grow-1 text-wrap">Show item list</label>
        </div>

        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="ShowSmallCalendar" class="form-check-input mt-0" Value="_settings.ShowSmallCalendar" ValueExpression="() => _settings.ShowSmallCalendar" ValueChanged="(bool show) => SaveShowSmallCalendar(show)" />
            </div>
            <label for="ShowSmallCalendar" class="input-group-text flex-grow-1 text-wrap">Show small calendar</label>
        </div>

        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="ShowLargeCalendar" class="form-check-input mt-0" Value="_settings.ShowLargeCalendar" ValueExpression="() => _settings.ShowLargeCalendar" ValueChanged="(bool show) => SaveShowLargeCalendar(show)" />
            </div>
            <label for="ShowLargeCalendar" class="input-group-text flex-grow-1 text-wrap">Show large calendar</label>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text col-6">First day of the week</span>
            <InputSelect class="form-select col-6" Value="_settings.FirstDayOfWeek" ValueExpression="() => _settings.FirstDayOfWeek" ValueChanged="(DayOfWeek dayOfWeek) => SaveFirstDayOfWeek(dayOfWeek)">
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues<DayOfWeek>())
                {
                    <option @key="dayOfWeek" value="@dayOfWeek">@dayOfWeek</option>
                }
            </InputSelect>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    SettingsModel _settings => SettingsService.Settings;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();
    }

    async Task UpdateSettings()
    {
        await SettingsService.UpdateSettings();

        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task SaveStartPage(string startPage)
    {
        _settings.StartPage = startPage;

        await SettingsService.UpdateSettings();
    }

    async Task SaveStartSidebar(string startSidebar)
    {
        _settings.StartSidebar = startSidebar;

        await SettingsService.UpdateSettings();
    }

    async Task SaveShowItemList(bool show)
    {
        _settings.ShowItemList = show;

        await UpdateSettings();
    }

    async Task SaveShowSmallCalendar(bool show)
    {
        _settings.ShowSmallCalendar = show;

        await UpdateSettings();
    }

    async Task SaveShowLargeCalendar(bool show)
    {
        _settings.ShowLargeCalendar = show;

        await UpdateSettings();
    }

    async Task SaveFirstDayOfWeek(DayOfWeek dayOfWeek)
    {
        _settings.FirstDayOfWeek = dayOfWeek;

        await UpdateSettings();
    }
}
