@page "/settings"

@using Ididit.Data.Models
@using Ididit.Services

@inject SettingsService SettingsService

<PageTitle>Settings</PageTitle>

<div class="col mh-100 overflow-auto px-0 px-md-1">
    <div class="my-1">

        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="ShowItemList" class="form-check-input mt-0" Value="_settings.ShowItemList" ValueExpression="() => _settings.ShowItemList" ValueChanged="(bool show) => SaveShowItemList(show)" />
            </div>
            <label for="ShowItemList" class="input-group-text flex-grow-1 text-wrap">Show item list</label>
        </div>

        <div class="input-group flex-nowrap">
            <span class="input-group-text">First day of the week</span>
            <InputSelect class="form-select" Value="_settings.FirstDayOfWeek" ValueExpression="() => _settings.FirstDayOfWeek" ValueChanged="(DayOfWeek dayOfWeek) => SaveFirstDayOfWeek(dayOfWeek)">
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues<DayOfWeek>())
                {
                    <option @key="dayOfWeek" value="@dayOfWeek">@dayOfWeek</option>
                }
            </InputSelect>
        </div>

    </div>
</div>

@code {
    SettingsModel _settings => SettingsService.Settings;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();
    }

    async Task SaveShowItemList(bool show)
    {
        _settings.ShowItemList = show;

        await SettingsService.UpdateSettings();
    }

    async Task SaveFirstDayOfWeek(DayOfWeek dayOfWeek)
    {
        _settings.FirstDayOfWeek = dayOfWeek;

        await SettingsService.UpdateSettings();
    }
}
