@page "/settings"

@using Ididit.Data.Models
@using Ididit.Services

@inject SettingsService SettingsService
@inject JsInterop JsInterop
@inject IStringLocalizer<Loc> Loc

<PageTitle>Settings</PageTitle>

<div>
    <div class="my-1 list-group">

        <div class="list-group-item">
            <InputCheckbox id="IsDarkMode" class="form-check-input me-1" Value="_settings.IsDarkMode" ValueExpression="() => _settings.IsDarkMode" ValueChanged="SaveIsDarkMode" />
            <label for="IsDarkMode" class="form-check-label stretched-link">@Loc["Dark mode"]</label>
        </div>

        <div class="list-group-item">
            <small class="">@Loc["Theme"]:</small>
            <InputSelect class="form-select" Value="_settings.Theme" ValueExpression="() => _settings.Theme" TValue="string" ValueChanged="SaveTheme">
                <option value="default">default</option>
                <option value="cerulean">cerulean</option>
                <option value="cosmo">cosmo</option>
                <option value="cyborg">cyborg</option>
                <option value="darkly">darkly</option>
                <option value="flatly">flatly</option>
                <option value="journal">journal</option>
                <option value="litera">litera</option>
                <option value="lumen">lumen</option>
                <option value="lux">lux</option>
                <option value="materia">materia</option>
                <option value="minty">minty</option>
                <option value="morph">morph</option>
                <option value="pulse">pulse</option>
                <option value="quartz">quartz</option>
                <option value="sandstone">sandstone</option>
                <option value="simplex">simplex</option>
                <option value="sketchy">sketchy</option>
                <option value="slate">slate</option>
                <option value="solar">solar</option>
                <option value="spacelab">spacelab</option>
                <option value="superhero">superhero</option>
                <option value="united">united</option>
                <option value="vapor">vapor</option>
                <option value="yeti">yeti</option>
                <option value="zephyr">zephyr</option>
            </InputSelect>
        </div>

        <div class="list-group-item">
            <small class="">@Loc["Start page"]:</small>
            <InputSelect class="form-select" Value="_settings.StartPage" ValueExpression="() => _settings.StartPage" TValue="string" ValueChanged="SaveStartPage">
                <option value="">@Loc["Notes, Tasks, Habits"]</option>
                <option value="/notes">@Loc["Notes"]</option>
                <option value="/tasks">@Loc["Tasks"]</option>
                <option value="/habits">@Loc["Habits"]</option>
                <option value="/about">@Loc["About"]</option>
            </InputSelect>
        </div>

        <div class="list-group-item">
            <small class="">@Loc["Start sidebar"]:</small>
            <InputSelect class="form-select" Value="_settings.StartSidebar" ValueExpression="() => _settings.StartSidebar" TValue="string" ValueChanged="SaveStartSidebar">
                <option value="">@Loc["None"]</option>
                <option value="Settings">@Loc["Settings"]</option>
                <option value="Data">@Loc["Data"]</option>
                <option value="Backup">@Loc["Backup"]</option>
                <option value="Search">@Loc["Search, Filter, Sort"]</option>
                <option value="Menu">@Loc["Menu"]</option>
                <option value="Categories">@Loc["Categories"]</option>
                <option value="Priorities">@Loc["Priorities"]</option>
                <option value="Help">@Loc["Help"]</option>
                <option value="Trash">@Loc["Trash"]</option>
            </InputSelect>
        </div>

        <div class="list-group-item">
            <InputCheckbox id="ShowItemList" class="form-check-input me-1" Value="_settings.ShowItemList" ValueExpression="() => _settings.ShowItemList" ValueChanged="SaveShowItemList" />
            <label for="ShowItemList" class="form-check-label stretched-link">@Loc["Show item list"]</label>
        </div>

        <div class="list-group-item">
            <InputCheckbox id="ShowSmallCalendar" class="form-check-input me-1" Value="_settings.ShowSmallCalendar" ValueExpression="() => _settings.ShowSmallCalendar" ValueChanged="SaveShowSmallCalendar" />
            <label for="ShowSmallCalendar" class="form-check-label stretched-link">@Loc["Show small calendar"]</label>
        </div>

        <div class="list-group-item">
            <InputCheckbox id="ShowLargeCalendar" class="form-check-input me-1" Value="_settings.ShowLargeCalendar" ValueExpression="() => _settings.ShowLargeCalendar" ValueChanged="SaveShowLargeCalendar" />
            <label for="ShowLargeCalendar" class="form-check-label stretched-link">@Loc["Show large calendar"]</label>
        </div>

        <div class="list-group-item">
            <small class="">@Loc["Language"]:</small>
            <InputSelect class="form-select" Value="_settings.Culture" ValueExpression="() => _settings.Culture" TValue="string" ValueChanged="SaveCulture">
                @foreach ((string key, Loc loc) in Ididit.Loc.Cultures)
                {
                    <option @key="key" value="@key">@loc.Language</option>
                }
            </InputSelect>
        </div>

        <div class="list-group-item">
            <small class="">@Loc["Week start"]:</small>
            <InputSelect class="form-select" Value="_settings.FirstDayOfWeek" ValueExpression="() => _settings.FirstDayOfWeek" TValue="DayOfWeek" ValueChanged="SaveFirstDayOfWeek">
                @foreach (DayOfWeek dayOfWeek in Enum.GetValues<DayOfWeek>())
                {
                    <option @key="dayOfWeek" value="@dayOfWeek">@Loc[dayOfWeek.ToString()]</option>
                }
            </InputSelect>
        </div>

        <div class="list-group-item">
            <InputCheckbox id="InsertTabsInNoteContent" class="form-check-input me-1" Value="_settings.InsertTabsInNoteContent" ValueExpression="() => _settings.InsertTabsInNoteContent" ValueChanged="SaveInsertTabsInNoteContent" />
            <label for="InsertTabsInNoteContent" class="form-check-label stretched-link">@Loc["Insert tabs in note content"]</label>
        </div>

        <div class="list-group-item">
            <InputCheckbox id="DisplayNoteContentAsMarkdown" class="form-check-input me-1" Value="_settings.DisplayNoteContentAsMarkdown" ValueExpression="() => _settings.DisplayNoteContentAsMarkdown" ValueChanged="SaveDisplayNoteContentAsMarkdown" />
            <label for="DisplayNoteContentAsMarkdown" class="form-check-label stretched-link">@Loc["Display note content as markdown"]</label>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public bool StateChanged { get; set; }

    [Parameter]
    public EventCallback<bool> StateChangedChanged { get; set; }

    SettingsModel _settings => SettingsService.Settings;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();
    }

    async Task UpdateAndRefresh()
    {
        await SettingsService.UpdateSettings();

        StateChanged = !StateChanged;
        await StateChangedChanged.InvokeAsync(StateChanged);
    }

    async Task SaveIsDarkMode(bool isDarkMode)
    {
        if (_settings.IsDarkMode != isDarkMode)
        {
            string mode = isDarkMode ? "dark" : "light";
            await JsInterop.SetMode(mode);
        }

        _settings.IsDarkMode = isDarkMode;

        await SettingsService.UpdateSettings();
    }

    async Task SaveTheme(string theme)
    {
        if (_settings.Theme != theme)
        {
            await JsInterop.SetTheme(theme);
        }

        _settings.Theme = theme;

        await SettingsService.UpdateSettings();
    }

    async Task SaveStartPage(string startPage)
    {
        _settings.StartPage = startPage;

        await SettingsService.UpdateSettings();
    }

    async Task SaveStartSidebar(string startSidebar)
    {
        _settings.StartSidebar = startSidebar;

        await SettingsService.UpdateSettings();
    }

    async Task SaveShowItemList(bool show)
    {
        _settings.ShowItemList = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowSmallCalendar(bool show)
    {
        _settings.ShowSmallCalendar = show;

        await UpdateAndRefresh();
    }

    async Task SaveShowLargeCalendar(bool show)
    {
        _settings.ShowLargeCalendar = show;

        await UpdateAndRefresh();
    }

    async Task SaveCulture(string culture)
    {
        _settings.Culture = culture;

        Ididit.Loc.SetCulture(culture);

        await UpdateAndRefresh();
    }

    async Task SaveFirstDayOfWeek(DayOfWeek dayOfWeek)
    {
        _settings.FirstDayOfWeek = dayOfWeek;

        await UpdateAndRefresh();
    }

    async Task SaveInsertTabsInNoteContent(bool val)
    {
        _settings.InsertTabsInNoteContent = val;

        await UpdateAndRefresh();
    }

    async Task SaveDisplayNoteContentAsMarkdown(bool val)
    {
        _settings.DisplayNoteContentAsMarkdown = val;

        await UpdateAndRefresh();
    }
}
