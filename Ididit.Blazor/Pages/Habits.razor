@page "/habits"
@page "/habits/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HabitService HabitService
@inject AppData AppData

<PageTitle>Habits</PageTitle>

<div class="col mh-100 overflow-auto">

    <NavLink class="input-group text-decoration-none my-1 p-1" href="/habits/add">
        <span class="input-group-text flex-grow-1">Add new habit</span>

        <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
    </NavLink>

    @if (HabitService.Habits is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (HabitModel habit in HabitService.Habits.Where(h => !h.IsDeleted))
        {
            <div class="bg-body-tertiary my-1 p-1">
                @if (habit.Id == Id)
                {
                    <div class="input-group flex-nowrap">
                        <PriorityComponent Model="habit" />
                        <span class="input-group-text flex-grow-1 text-wrap" @onclick="() => ToggleSelected(habit.Id)">@habit.Title</span>
                        <NavLink class="btn btn-outline-primary" href="@($"/habits/{habit.Id}/update")"><i class="bi bi-pencil-square"></i></NavLink>
                        <button class="btn btn-outline-primary" @onclick="() => HabitService.DeleteHabit(habit)"><i class="bi bi-trash"></i></button>
                        <button class="btn btn-outline-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=habit />

                    if (habit.LastTimeDoneAt is not null)
                    {
                        <div class="p-1 border" style="border-radius: var(--bs-border-radius)">
                            <small>Last time done: @habit.LastTimeDoneAt</small>
                        </div>
                    }

                    if (habit.TimesDone is not null)
                    {
                        <div class="p-1 border" style="border-radius: var(--bs-border-radius)">
                            <small>Times done: @habit.TimesDone.Count</small>
                        </div>

                        DayOfWeek firstDayOfWeek = DayOfWeek.Monday;
                        DateTime currentDate = DateTime.Now;
                        DateTime firstDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
                        DateTime day = firstDayOfMonth.AddDays((int)firstDayOfWeek - (int)firstDayOfMonth.DayOfWeek);

                        Dictionary<DateTime, int> tasksPerDay = habit.TimesDone
                            .GroupBy(date => date.StartedAt.Date)
                            .ToDictionary(group => group.Key, group => group.Count());

                        string[] days = { "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su", };

                        <div class="input-group-text">
                            <div class="mx-auto">
                                <div class="bg-body">
                                    @foreach (string d in days)
                                    {
                                        <div class="border d-inline-flex" style="align-items: center; justify-content: center; height: 50px; width: 50px">@d</div>
                                    }
                                </div>

                                @for (int week = 0; week < 6; week++)
                                {
                                    <div>
                                        @for (int dayInWeek = 0; dayInWeek < 7; dayInWeek++)
                                        {
                                            if (tasksPerDay.TryGetValue(day, out int count))
                                            {
                                                DateTime dateTime = day; // if not captured locally, day becomes the last value used in the loop
                                                <div class="border d-inline-flex bg-success" 
                                                    style="align-items: center; justify-content: center; height: 50px; width: 50px"
                                                    @onclick="() => HabitService.AddTimeDone(habit, dateTime)">@day.Day<small>(@count)</small></div>
                                            }
                                            else
                                            {
                                                DateTime dateTime = day; // if not captured locally, day becomes the last value used in the loop
                                                <div class="border d-inline-flex" 
                                                    style="align-items: center; justify-content: center; height: 50px; width: 50px"
                                                    @onclick="() => HabitService.AddTimeDone(habit, dateTime)">@day.Day</div>
                                            }

                                            day = day.AddDays(1);
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <div class="input-group">
                        <label class="input-group-text" for="countInput">Repeat</label>
                        <InputNumber class="form-control" id="countInput" @bind-Value="habit.RepeatCount" />

                        <label class="input-group-text" for="intervalInput">times every</label>
                        <InputNumber class="form-control" id="intervalInput" @bind-Value="habit.RepeatInterval" />

                        <InputSelect class="form-select" @bind-Value="habit.RepeatPeriod">
                            @foreach (Period period in Enum.GetValues<Period>())
                            {
                                <option value="@period">@period</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="input-group">
                        <label class="input-group-text" for="durationInput">Duration</label>
                        <InputDate class="form-control" id="durationInput" @bind-Value="DurationProxy" Type="InputDateType.Time" />
                    </div>

                    <CategoryComponent Model="habit" />

                    <div class="p-1 border" style="border-radius: var(--bs-border-radius)">
                        <small>Created: @habit.CreatedAt</small>
                        <small>Updated: @habit.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group flex-nowrap">
                        <span class="input-group-text">@AppData.GetPriorityTitle(habit.Priority)</span>
                        <span class="input-group-text flex-grow-1 text-wrap" @onclick="() => ToggleSelected(habit.Id)">@habit.Title</span>
                        @if (habit.LastTimeDoneAt is not null)
                        {
                            <small class="input-group-text">@(habit.LastTimeDoneAt.Value.Date == DateTime.Now.Date ? habit.LastTimeDoneAt.Value.ToShortTimeString() : habit.LastTimeDoneAt.Value.ToShortDateString())</small>
                        }
                        <button class="btn btn-outline-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=habit IsReadOnly=true />
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    TimeOnly DurationProxy
    {
        get => HabitService.SelectedHabit?.Duration ?? TimeOnly.MinValue;
        set
        {
            if (HabitService.SelectedHabit is not null)
                HabitService.SelectedHabit.Duration = value == TimeOnly.MinValue ? null : value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await HabitService.Initialize();
    }

    protected override async Task OnParametersSetAsync()
    {
        HabitService.SetSelectedHabit(Id);
        await HabitService.LoadTimesDone(HabitService.SelectedHabit);
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
                Id = null;
            else
            {
                Id = id;
                HabitService.SetSelectedHabit(Id);
                await HabitService.LoadTimesDone(HabitService.SelectedHabit);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/habits");
            else
                NavigationManager.NavigateTo($"/habits/{id}");
        }
    }
}
