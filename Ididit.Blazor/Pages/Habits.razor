@page "/habits"
@page "/habits/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HabitService HabitService
@inject AppData AppData
@inject SettingsService SettingsService
@inject JsInterop JsInterop

<PageTitle>Habits</PageTitle>

<div @ref="columnRef" class="col child-column px-0 px-md-1">

    @if (HabitService.NewHabit is null)
    {
        <button class="btn input-group d-flex flex-nowrap my-1 p-0" @onclick="() => { HabitService.NewHabit = new(); shouldFocus = true; }">
            <span class="input-group-text flex-grow-1">Add new habit</span>

            <span class="btn btn-outline-primary"><i class="bi bi-plus-square"></i></span>
        </button>
    }
    @if (HabitService.NewHabit is not null)
    {
        <div class="my-1">
            <div class="input-group">
                <PriorityComponent Model="HabitService.NewHabit" />

                <InputTextImmediate class="form-control" @ref="inputElement" @bind-Value="HabitService.NewHabit.Title" placeholder="Add new habit" />

                <button class="btn btn-outline-primary" @onclick="HabitService.AddHabit" disabled="@string.IsNullOrWhiteSpace(HabitService.NewHabit.Title)"><i class="bi bi-floppy"></i></button>
                <button class="btn btn-outline-primary" @onclick="() => HabitService.NewHabit = null"><i class="bi bi-trash"></i></button>
            </div>

            <div class="input-group">
                <label class="input-group-text" for="countInput">Repeat</label>
                <InputNumber class="form-control" id="countInput" @bind-Value="HabitService.NewHabit.RepeatCount" />

                <label class="input-group-text" for="intervalInput">every</label>
                <InputNumber class="form-control" id="intervalInput" @bind-Value="HabitService.NewHabit.RepeatInterval" />

                <InputSelect class="form-select" @bind-Value="HabitService.NewHabit.RepeatPeriod">
                    @foreach (Period period in Enum.GetValues<Period>())
                    {
                        <option @key="period" value="@period">@period</option>
                    }
                </InputSelect>
            </div>

            <div class="input-group">
                <label class="input-group-text" for="durationInput">Duration</label>
                <InputDate class="form-control" id="durationInput" @bind-Value="HabitService.NewHabit.DurationProxy" Type="InputDateType.Time" />
            </div>

            <CategoryComponent Model="HabitService.NewHabit" />
        </div>
    }

    @if (HabitService.Habits is null)
    {
        <p>Loading...</p>
    }
    else if (columnWidth != 0)
    {
        foreach (HabitModel habit in HabitService.GetHabits())
        {
            <div class="my-1 d-flex">
                @if (habit.Id == Id && HabitService.NewHabit is null)
                {
                    <div>
                        <div class="input-group flex-nowrap">
                            <PriorityComponent Model="habit" />
                            <InputText class="form-control" Value="@habit.Title" ValueExpression="() => habit.Title" ValueChanged="(string title) => SaveTitle(habit, title)" />
                            <button class="btn btn-outline-primary" @onclick="() => ToggleSelected(habit.Id)"><i class="bi bi-floppy"></i></button>
                            <button class="btn btn-outline-primary" @onclick="() => HabitService.DeleteHabit(habit)"><i class="bi bi-trash"></i></button>
                            <button class="btn btn-outline-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                        </div>

                        <ItemsComponent Items=habit />

                        @if (habit.TimesDone is not null && habit.TimesDoneByDay is not null)
                        {
                            if (habit.LastTimeDoneAt is not null)
                            {
                                <div class="p-1 border rounded-0">
                                    <small>Completed @habit.TimesDone.Count times, last time on @habit.LastTimeDoneAt</small>
                                </div>
                            }

                            @if (SettingsService.Settings.ShowLargeCalendar)
                            {
                                <div class="input-group-text p-0 border-0 rounded-0">
                                    <div class="mx-auto">
                                        <CalendarComponent Habit="habit" HabitChanged="StateHasChanged" DisplayMonth />
                                    </div>
                                </div>
                            }
                        }

                        <div class="input-group">
                            <label class="input-group-text" for="countInput">Repeat</label>
                            <InputNumber class="form-control" id="countInput" Value="habit.RepeatCount" ValueExpression="() => habit.RepeatCount" ValueChanged="(int repeatCount) => SaveRepeatCount(habit, repeatCount)" />

                            <label class="input-group-text" for="intervalInput">every</label>
                            <InputNumber class="form-control" id="intervalInput" Value="habit.RepeatInterval" ValueExpression="() => habit.RepeatInterval" ValueChanged="(int repeatInterval) => SaveRepeatInterval(habit, repeatInterval)" />

                            <InputSelect class="form-select" Value="habit.RepeatPeriod" ValueExpression="() => habit.RepeatPeriod" ValueChanged="(Period repeatPeriod) => SaveRepeatPeriod(habit, repeatPeriod)">
                                @foreach (Period period in Enum.GetValues<Period>())
                                {
                                    <option @key="period" value="@period">@period</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="input-group">
                            <label class="input-group-text" for="durationInput">Duration</label>
                            <InputDate class="form-control" id="durationInput" Value="habit.DurationProxy" ValueExpression="() => habit.DurationProxy" ValueChanged="(TimeOnly duration) => SaveDuration(habit, duration)" Type="InputDateType.Time" />
                        </div>

                        <CategoryComponent Model="habit" />

                        <div class="p-1 border rounded-0">
                            <small class="d-inline-block mx-1">Created: @habit.CreatedAt</small>
                            <small class="d-inline-block mx-1">Updated: @habit.UpdatedAt</small>
                        </div>
                    </div>
                }
                else
                {
                    string style = "";
                    if (!IsEmbedded)
                    {
                        style = "height: 50px;";
                    }
                    <div class="w-100">
                        <div class="input-group flex-nowrap" style="@style">
                            <span class="input-group-text">@AppData.GetPriorityTitle(habit.Priority)</span>
                            <button class="input-group-text flex-grow-1 text-wrap bg-body-secondary" @onclick="() => ToggleSelected(habit.Id)">@habit.Title</button>

                            @if (habit.LastTimeDoneAt is not null)
                            {
                                DateTime lastTimeDoneAt = habit.LastTimeDoneAt.Value;
                                string color = habit.IsOverdue() switch
                                {
                                    true => "bg-danger-subtle",
                                    false => "bg-success-subtle",
                                    null => ""
                                };
                                <small class="@($"input-group-text {color}")">@(lastTimeDoneAt.Date == DateTime.Now.Date ? lastTimeDoneAt.ToShortTimeString() : lastTimeDoneAt.ToShortDateString())</small>
                            }

                            @if (IsEmbedded)
                            {
                                <button class="btn btn-outline-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                            }
                        </div>

                        @if (IsEmbedded && SettingsService.Settings.ShowSmallCalendar)
                        {
                            <div class="input-group-text p-0 border-0 rounded-0">
                                <div class="mx-auto">
                                    <CalendarComponent Habit="habit" HabitChanged="StateHasChanged" ColumnWidth="columnWidth" />
                                 </div>
                            </div>
                        }

                        @if (SettingsService.Settings.ShowItemList)
                        {
                            <ItemsComponent Items=habit IsReadOnly=true />
                        }
                    </div>
                    if (!IsEmbedded && SettingsService.Settings.ShowSmallCalendar)
                    {
                        <div class="d-flex">
                            <CalendarComponent Habit="habit" HabitChanged="StateHasChanged" ColumnWidth="columnWidth" DisplayBasedOnWidth />
                        </div>
                    }
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    [CascadingParameter(Name = "StateChanged")]
    public bool StateChanged { get; set; }

    InputTextImmediate? inputElement;

    bool shouldFocus;

    protected override async Task OnInitializedAsync()
    {
        await SettingsService.Initialize();

        await HabitService.Initialize();
    }

    protected override async Task OnParametersSetAsync()
    {
        await HabitService.SetSelectedHabit(Id);
    }

    ElementReference columnRef;
    int columnWidth;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var columnDimensions = await JsInterop.GetElementDimensions(columnRef);
            columnWidth = columnDimensions.Width;

            // TODO: try to make it work without this
            // or at least move it up the hierarchy, before Habits render for the first time
            // or don't render habits if columnWidth == 0
            StateHasChanged();
            // TODO: make it work without JsInterop and use @media for each day
            // even better: get <body> dimensions once at startup, calculate everything else from that
            // first render can be empty in MainLayout, with everything else rendersing only if body dimensions are set
        }

        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
            {
                Id = null;
            }
            else
            {
                Id = id;
                await HabitService.SetSelectedHabit(Id);
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/habits");
            else
                NavigationManager.NavigateTo($"/habits/{id}");
        }
    }

    async Task SaveTitle(HabitModel habit, string title)
    {
        habit.Title = title;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatCount(HabitModel habit, int repeatCount)
    {
        habit.RepeatCount = repeatCount;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatInterval(HabitModel habit, int repeatInterval)
    {
        habit.RepeatInterval = repeatInterval;

        await HabitService.UpdateHabit();
    }

    async Task SaveRepeatPeriod(HabitModel habit, Period repeatPeriod)
    {
        habit.RepeatPeriod = repeatPeriod;

        await HabitService.UpdateHabit();
    }

    async Task SaveDuration(HabitModel habit, TimeOnly duration)
    {
        habit.DurationProxy = duration;

        await HabitService.UpdateHabit();
    }
}
