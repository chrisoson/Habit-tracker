@page "/habits"
@page "/habits/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject HabitService HabitService

<PageTitle>Habits</PageTitle>

<div class="fs-1"><a href="/habits/add"><i class="bi bi-plus-square"></i></a></div>

@if (HabitService.Habits is null)
{
    <p>Loading...</p>
}
else
{
    foreach (HabitModel habit in HabitService.Habits.Where(h => !h.IsDeleted))
    {
        <div class="bg-body-tertiary my-1 p-1">
            @if (habit.Id == Id)
            {
                <p>
                    <span>Priority: @habit.PriorityId</span>
                    <a href="/habits">@habit.Title</a>
                    <a href="/habits/@habit.Id/update"><i class="bi bi-pencil-square"></i></a>
                    <button @onclick="() => HabitService.DeleteHabit(habit)"><i class="bi bi-trash"></i></button>
                    <button @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                </p>

                <ItemsComponent Items=habit />

                if (habit.LastTimeDoneAt is not null)
                {
                    <small>LastTimeDoneAt: @habit.LastTimeDoneAt</small>
                }

                if (habit.TimesDone is not null)
                {
                    <div>Times done: @habit.TimesDone.Count</div>

                    foreach(TimeModel time in habit.TimesDone)
                    {
                        <div>
                            <small>Started: @time.StartedAt</small>

                            @if (time.CompletedAt is not null)
                            {
                                <small> Completed: @time.CompletedAt</small>
                            }
                        </div>
                    }
                }

                <div>
                    <small>Repeat @habit.RepeatCount times</small>
                    <small>every @habit.RepeatInterval</small>
                    <small>@habit.RepeatPeriod</small>
                </div>

                <div>
                    <small>Category: @habit.CategoryId</small>
                </div>

                <div>
                    <small>Created: @habit.CreatedAt</small>
                    <small>Updated: @habit.UpdatedAt</small>
                </div>
            }
            else
            {
                <p>
                    <span>Priority: @habit.PriorityId</span>
                    <a href="/habits/@habit.Id">@habit.Title</a>
                    <button @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                </p>

                <ItemsComponent Items=habit />
            }
        </div>
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await HabitService.Initialize();
    }

    protected override async Task OnParametersSetAsync()
    {
        HabitService.SetSelectedHabit(Id);
        await HabitService.LoadTimesDone(HabitService.SelectedHabit);
    }
}
