@page "/habits"
@page "/habits/{Id:long}"

@using Ididit.Data.Models
@using Ididit.Services

@inject HabitService HabitService

<PageTitle>Habits</PageTitle>

<h1>Habits</h1>

<p><a href="/habits/add">Add habit</a></p>

@if (HabitService.Habits is null || HabitService.NewHabit is null)
{
    <p>Loading...</p>
}
else
{
    <p>Habits: @HabitService.Habits.Where(h => !h.IsDeleted).Count()</p>

    foreach (HabitModel habit in HabitService.Habits.Where(h => !h.IsDeleted))
    {
        if (habit.Id == Id)
        {
            <p><a href="/habits">@habit.Title</a><button @onclick="() => HabitService.MarkAsDone(habit)">Done</button></p>

            <p><a href="/habits/@habit.Id/update">Update</a></p>

            <button @onclick="() => HabitService.DeleteHabit(habit)">Delete Habit</button>

            <p>CreatedAt: @habit.CreatedAt</p>
            <p>UpdatedAt: @habit.UpdatedAt</p>
            <p>Priority: @habit.Priority</p>

            if (habit.LastTimeDoneAt is not null)
            {
                <p>LastTimeDoneAt: @habit.LastTimeDoneAt</p>
            }

            if (habit.TimesDone is not null)
            {
                <p>Times done: @habit.TimesDone.Count</p>

                foreach(DateTime time in habit.TimesDone)
                {
                    <p>@time</p>
                }
            }
        }
        else
        {
            <p><a href="/habits/@habit.Id">@habit.Title</a><button @onclick="() => HabitService.MarkAsDone(habit)">Done</button></p>
        }
    }
}

@code {
    [Parameter]
    public long? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await HabitService.Initialize();
    }
}
