@page "/habits"
@page "/habits/{Id:long}"

@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HabitService HabitService
@inject AppData AppData

<PageTitle>Habits</PageTitle>

<div class="col mh-100 overflow-auto">

    <NavLink class="input-group text-decoration-none my-1 p-1" href="/habits/add">
        <span class="input-group-text flex-grow-1">Add new habit</span>

        <span class="btn btn-primary"><i class="bi bi-plus-square"></i></span>
    </NavLink>

    @if (HabitService.Habits is null)
    {
        <p>Loading...</p>
    }
    else
    {
        foreach (HabitModel habit in HabitService.Habits.Where(h => !h.IsDeleted))
        {
            <div class="bg-body-tertiary my-1 p-1">
                @if (habit.Id == Id)
                {
                    <div class="input-group">
                        <span class="input-group-text">@AppData.GetPriorityTitle(habit.Priority)</span>
                        <span class="input-group-text flex-grow-1" @onclick="() => ToggleSelected(habit.Id)">@habit.Title</span>
                        <NavLink class="btn btn-primary" href="@($"/habits/{habit.Id}/update")"><i class="bi bi-pencil-square"></i></NavLink>
                        <button class="btn btn-primary" @onclick="() => HabitService.DeleteHabit(habit)"><i class="bi bi-trash"></i></button>
                        <button class="btn btn-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=habit />

                    if (habit.LastTimeDoneAt is not null)
                    {
                        <small>Last time done: @habit.LastTimeDoneAt</small>
                    }

                    if (habit.TimesDone is not null)
                    {
                        <div>Times done: @habit.TimesDone.Count</div>

                        foreach(TimeModel time in habit.TimesDone)
                        {
                            <div>
                                <small>Started: @time.StartedAt</small>

                                @if (time.CompletedAt is not null)
                                {
                                    <small> Completed: @time.CompletedAt</small>
                                }
                            </div>
                        }
                    }

                    <div>
                        <small>Repeat @habit.RepeatCount times</small>
                        <small>every @habit.RepeatInterval</small>
                        <small>@habit.RepeatPeriod</small>
                    </div>

                    <div>
                        <small>Duration: @habit.Duration</small>
                    </div>

                    <div>
                        <small>Category: @AppData.GetCategoryTitle(habit.CategoryId)</small>
                    </div>

                    <div>
                        <small>Created: @habit.CreatedAt</small>
                        <small>Updated: @habit.UpdatedAt</small>
                    </div>
                }
                else
                {
                    <div class="input-group">
                        <span class="input-group-text">@AppData.GetPriorityTitle(habit.Priority)</span>
                        <span class="input-group-text flex-grow-1" @onclick="() => ToggleSelected(habit.Id)">@habit.Title</span>
                        <button class="btn btn-primary" @onclick="() => HabitService.MarkAsDone(habit)"><i class="bi bi-check-square"></i></button>
                    </div>

                    <ItemsComponent Items=habit IsReadOnly=true />
                }
            </div>
        }
    }

</div>

@code {
    [Parameter]
    public long? Id { get; set; }

    [Parameter]
    public bool IsEmbedded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await HabitService.Initialize();
    }

    protected override async Task OnParametersSetAsync()
    {
        HabitService.SetSelectedHabit(Id);
        await HabitService.LoadTimesDone(HabitService.SelectedHabit);
    }

    async Task ToggleSelected(long id)
    {
        if (IsEmbedded)
        {
            if (Id == id)
                Id = null;
            else
                Id = id;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("skipNextScrollTo");

            if (Id == id)
                NavigationManager.NavigateTo("/habits");
            else
                NavigationManager.NavigateTo($"/habits/{id}");
        }
    }
}
