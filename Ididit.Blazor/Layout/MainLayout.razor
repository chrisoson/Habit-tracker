@using Ididit.Blazor.Pages
@using Ididit.Data

@inherits LayoutComponentBase

@inject AppData AppData
@inject INavBarFragment NavBarFragment
@inject NavigationManager NavigationManager
@inject JsInterop JsInterop

<div class="container-fluid d-flex flex-column vh-100 mh-100 overflow-hidden">
    <div class="row flex-shrink-1">
        <div class="col bg-body-secondary d-flex align-items-center">

            <button class="nav-link" @onclick="SelectComponent<Menu>"><i class="bi bi-list"></i> Menu</button>

            <NavLink class="nav-link ms-3" href="habits"><i class="bi bi-card-list"></i> Habits</NavLink>
            <NavLink class="nav-link ms-3" href="notes"><i class="bi bi-card-text"></i> Notes</NavLink>
            <NavLink class="nav-link ms-3" href="tasks"><i class="bi bi-card-checklist"></i> Tasks</NavLink>

            <NavLink class="nav-link ms-3" href="about"><i class="bi bi-info-square"></i> About</NavLink>

            <span class="ms-3">
                @NavBarFragment.GetNavBarFragment()
            </span>

        </div>
    </div>

    <div class="row flex-grow-1 parent-row">
        <CascadingValue Name="StateChanged" Value=@_stateChanged>
            <CascadingValue Name="WindowDimensions" Value=@_windowDimensions>

                @if (_dynamicComponentType is not null)
                {
                    <div class="col-12 col-md-2 child-column px-0 px-md-1" style="min-width: 350px">

                        <div class="input-group flex-nowrap my-1">
                            <span class="input-group-text flex-grow-1">@_titleByTypeName[_dynamicComponentType.Name]</span>
                            <button class="btn btn-outline-primary" @onclick="() => _dynamicComponentType = null"><i class="bi bi-x-square"></i></button>
                        </div>

                        <DynamicComponent Type="_dynamicComponentType" Parameters="_dynamicComponentParametersByName.GetValueOrDefault(_dynamicComponentType.Name)" />

                    </div>
                }

                @Body

            </CascadingValue>
        </CascadingValue>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _stateChanged;

    private Dimensions? _windowDimensions;

    private Type? _dynamicComponentType;
    private Dictionary<string, Dictionary<string, object>> _dynamicComponentParametersByName = new ();

    private readonly Dictionary<string, string> _titleByTypeName = new()
    {
        { "Menu", "Menu" },
        { "Search", "Search, Filter, Sort" },
        { "Settings", "Settings" },
        { "Backup", "Backup" },
        { "Categories", "Categories" },
        { "Data", "Data" },
        { "Priorities", "Priorities" },
        { "Trash", "Trash" }
    };

    protected override async Task OnInitializedAsync()
    {
        await AppData.InitializeSettings();

        Dictionary<string, object> dynamicComponentParameters = new Dictionary<string, object>()
        {
            { "DynamicComponentType", _dynamicComponentType },
            { "DynamicComponentTypeChanged", EventCallback.Factory.Create<Type?>(this, val => _dynamicComponentType = val)},
        };

        Dictionary<string, object> stateChangedParameters = new Dictionary<string, object>()
        {
            { "StateChanged", _stateChanged },
            { "StateChangedChanged", EventCallback.Factory.Create<bool>(this, val => _stateChanged = val)},
        };

        _dynamicComponentParametersByName = new Dictionary<string, Dictionary<string, object>>
        {
            { "Menu", dynamicComponentParameters },
            { "Search", stateChangedParameters },
            { "Settings", stateChangedParameters },
            { "Backup", stateChangedParameters },
            { "Categories", stateChangedParameters },
            { "Data", stateChangedParameters },
            { "Priorities", stateChangedParameters },
            { "Trash", stateChangedParameters }
        };

        if (!string.IsNullOrEmpty(AppData.Settings.StartSidebar))
            SelectComponent(AppData.Settings.StartSidebar);

        if (!string.IsNullOrEmpty(AppData.Settings.StartPage))
        {
            if (!NavigationManager.Uri.Contains(AppData.Settings.StartPage)) // fix for ERR_TOO_MANY_REDIRECTS on Blazor Server which calls OnInitializedAsync twice
            {
                NavigationManager.NavigateTo(AppData.Settings.StartPage);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _windowDimensions = await JsInterop.GetWindowDimensions();
        }
    }

    private void SelectComponent<T>()
    {
        _dynamicComponentType = typeof(T);
    }

    private void SelectComponent(string name)
    {
        _dynamicComponentType = Type.GetType($"Ididit.Blazor.Pages.{name}");
    }
}