@using Ididit.Blazor.Pages
@using Ididit.Data

@inherits LayoutComponentBase

@inject AppData AppData
@inject INavBarFragment NavBarFragment

<div class="container-fluid d-flex flex-column vh-100 mh-100 overflow-hidden">
    <div class="row flex-shrink-1">
        <div class="col bg-body-secondary d-flex align-items-center">

            <button class="nav-link" @onclick="SelectComponent<Menu>"><i class="bi bi-list"></i> Menu</button>

            <NavLink class="nav-link ms-3" href="habits"><i class="bi bi-card-list"></i> Habits</NavLink>
            <NavLink class="nav-link ms-3" href="notes"><i class="bi bi-card-text"></i> Notes</NavLink>
            <NavLink class="nav-link ms-3" href="tasks"><i class="bi bi-card-checklist"></i> Tasks</NavLink>

            <NavLink class="nav-link ms-3" href="about"><i class="bi bi-info-square"></i> About</NavLink>

            <span class="ms-3">
                @NavBarFragment.GetNavBarFragment()
            </span>

        </div>
    </div>

    <div class="row flex-grow-1 overflow-hidden">
        <CascadingValue Name="StateChanged" Value=@stateChanged>

            @if (dynamicComponentType is not null)
            {
                <DynamicComponent Type="dynamicComponentType" Parameters="dynamicComponentParametersByName.GetValueOrDefault(dynamicComponentType.Name)" />
            }

            @Body

        </CascadingValue>
    </div>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    bool stateChanged;

    private Type? dynamicComponentType;
    private Dictionary<string, Dictionary<string, object>> dynamicComponentParametersByName = new ();

    protected override async Task OnInitializedAsync()
    {
        await AppData.InitializeSettings();

        Dictionary<string, object> dynamicComponentParameters = new Dictionary<string, object>()
        {
            { "DynamicComponentType", dynamicComponentType },
            { "DynamicComponentTypeChanged", EventCallback.Factory.Create<Type?>(this, val => dynamicComponentType = val)},
        };

        Dictionary<string, object> stateChangedParameters = new Dictionary<string, object>()
        {
            { "StateChanged", stateChanged },
            { "StateChangedChanged", EventCallback.Factory.Create<bool>(this, val => stateChanged = val)},
        };

        dynamicComponentParametersByName = new Dictionary<string, Dictionary<string, object>>
        {
            { "Menu", dynamicComponentParameters },
            { "Search", stateChangedParameters },
            { "Settings", stateChangedParameters },
            { "Backup", stateChangedParameters },
            { "Categories", stateChangedParameters },
            { "Data", stateChangedParameters },
            { "Priorities", stateChangedParameters },
            { "Trash", stateChangedParameters }
        };

        if (!string.IsNullOrEmpty(AppData.Settings.StartSidebar))
            SelectComponent(AppData.Settings.StartSidebar);
    }

    void SelectComponent<T>()
    {
        dynamicComponentType = typeof(T);
    }

    void SelectComponent(string name)
    {
        dynamicComponentType = Type.GetType($"Ididit.Blazor.Pages.{name}");
    }
}