@using Ididit.Data.Models
@using Ididit.Services

@inject NoteService NoteService
@inject JsInterop JsInterop

<div class="input-group flex-nowrap">
    <PriorityComponent Model="note" />
    <InputText class="form-control" Value="@note.Title" ValueExpression="() => note.Title" ValueChanged="(string title) => SaveTitle(note, title)" />
    <button class="btn btn-outline-primary" @onclick="() => ToggleSelected(note.Id)"><i class="bi bi-floppy"></i></button>
    <button class="btn btn-outline-primary" @onclick="() => NoteService.DeleteNote(note)"><i class="bi bi-trash"></i></button>
</div>

<InputTextArea @ref="_inputTextAreaReference" class="form-control" style="resize:none" Value="@note.Content" ValueExpression="() => note.Content" ValueChanged="(string content) => SaveContent(note, content)" rows="@(note.Content.Count(c => c == '\n') + 1)" placeholder="Add note text" />

<CategoryComponent Model="note" />

<div class="p-1 border rounded-0">
    <small class="d-inline-block mx-1">Created: @note.CreatedAt</small>
    <small class="d-inline-block mx-1">Updated: @note.UpdatedAt</small>
</div>

@code {
    [EditorRequired]
    [Parameter]
    public NoteModel note { get; set; }

    InputTextArea? _inputTextAreaReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_inputTextAreaReference?.Element is not null)
            await JsInterop.HandleTabKey(_inputTextAreaReference.Element.Value);
    }

    async Task ToggleSelected(long id)
    {
        
    }

    async Task SaveTitle(NoteModel note, string title)
    {
        note.Title = title;

        await NoteService.UpdateNote();
    }

    async Task SaveContent(NoteModel note, string content)
    {
        note.Content = content;

        await NoteService.UpdateNote();
    }
}
