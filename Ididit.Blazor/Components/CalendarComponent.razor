@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject CalendarService CalendarService
@inject HabitService HabitService
@inject AppData AppData

@if (Habit is null || Habit.TimesDoneByDay is null)
{
    <p>Failed to load. Try refreshing.</p>
}
else
{
    if (DisplayMonth)
    {
        <div class="input-group mb-1">
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToPreviousWeek"><i class="bi bi-chevron-double-up"></i></button>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToPreviousMonth(AppData.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-left"></i></button>
            <span class="input-group-text flex-grow-1" style="justify-content: center;">@_calendarParams.FirstDayOfMonth.ToString("MMMM")</span>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToNextMonth(AppData.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-right"></i></button>
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToNextWeek"><i class="bi bi-chevron-double-down"></i></button>
        </div>

        <div class="bg-body d-flex">
            @for (int i = 0; i < 7; i++)
            {
                string day = CalendarService.GetDayOfWeek(AppData.Settings.FirstDayOfWeek, i);
                <div @key="day" class="border d-flex" style="align-items: center; justify-content: center; height: 50px; width: 50px">@day</div>
            }
        </div>
    }

    @for (int row = 0; row < rowCount; row++)
    {
        <div class="d-flex">
            @for (int day = 0; day < daysInRow; day++)
            {
                DateTime dateTime = CalendarService.GetCalendarDay(_calendarParams.CalendarStart, row * daysInRow + day); // if not captured locally, day becomes the last value used in the loop

                string text = dateTime.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday ? "text-warning" : "text-secondary";
                if (dateTime.Month == _calendarParams.FirstDayOfMonth.Month)
                    text += "-emphasis";
                string border = dateTime.Date == DateTime.Today.Date ? "border-4 border-primary-subtle" : "";
                string background = "bg-body-tertiary";
                string timesDone = "";
                int count = 0;
                List<TimeModel>? list = null;

                if (Habit.TimesDoneByDay.TryGetValue(dateTime, out list))
                {
                    count = list.Count;

                    if (count > 1)
                        timesDone = $"({count})";

                    if (count < Habit.RepeatCount)
                        background = "bg-warning-subtle";
                    else
                        background = "bg-success-subtle";
                }

                <button class="@($"border {border} {text} d-flex {background}")"
                        style="align-items: center; justify-content: center; height: 50px; width: 50px; line-height: normal; flex-direction: column;"
                        @onclick="() => count < Habit.RepeatCount ? AddTimeDone(dateTime) : RemoveTimeDone(list)">
                    @dateTime.Day<small>@timesDone</small>
                </button>
            }
        </div>
    }
}

@code {
    [EditorRequired]
    [Parameter]
    public HabitModel? Habit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<HabitModel?> HabitChanged { get; set; }

    [Parameter]
    public bool DisplayMonth { get; set; }

    [Parameter]
    public bool DisplayBasedOnWidth { get; set; }

    int rowCount = 0;
    int daysInRow = 0;

    [Parameter]
    public int ColumnWidth { get; set; }

    CalendarParams _calendarParams = new();

    protected override async Task OnInitializedAsync()
    {
        await AppData.InitializeSettings();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_calendarParams.CalendarStart == DateTime.MinValue)
        {
            if (DisplayMonth)
            {
                rowCount = 6;
                daysInRow = 7;
                _calendarParams.SetCalendarStartByFirstDayOfMonth(AppData.Settings.FirstDayOfWeek, DateTime.Today);
            }
        }

        if (rowCount == 0 && ColumnWidth != 0)
        {
            if (DisplayBasedOnWidth)
            {
                rowCount = 1;
                daysInRow = (ColumnWidth-350) / 50;
                _calendarParams.SetCalendarStartByDaysFromToday(-daysInRow + 1);
            }
            else
            {
                rowCount = 1;
                daysInRow = ColumnWidth / 50;
                _calendarParams.SetCalendarStartByFirstDayOfWeek(AppData.Settings.FirstDayOfWeek, DateTime.Today);
            }
        }

        if (Habit is not null && Habit.TimesDoneByDay is null)
        {
            await HabitService.LoadTimesDone(Habit);

            Habit.RefreshTimesDoneByDay();
        }
    }

    async Task AddTimeDone(DateTime dateTime)
    {
        if (dateTime > DateTime.Now)
            return;

        if (dateTime.Date == DateTime.Today.Date)
            dateTime = DateTime.Now;

        await HabitService.AddTimeDone(Habit!, dateTime);

        await HabitChanged.InvokeAsync(Habit);
    }

    async Task RemoveTimeDone(List<TimeModel>? list)
    {
        if (list is null || list.Count == 0)
            return;

        await HabitService.RemoveTimeDone(Habit!, list.Last());

        await HabitChanged.InvokeAsync(Habit);
    }
}