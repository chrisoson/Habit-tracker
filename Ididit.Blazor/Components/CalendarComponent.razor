@using Ididit.Data
@using Ididit.Data.Models
@using Ididit.Services

@inject CalendarService CalendarService
@inject HabitService HabitService
@inject AppData AppData

@if (Habit is null || Habit.TimesDoneByDay is null)
{
    <p>Loading...</p>
}
else
{
    if (DisplayMonth)
    {
        <div class="input-group mb-1">
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToPreviousWeek"><i class="bi bi-chevron-double-up"></i></button>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToPreviousMonth(AppData.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-left"></i></button>
            <span class="input-group-text flex-grow-1" style="justify-content: center;">@_calendarParams.FirstDayOfMonth.ToString("MMMM")</span>
            <button class="btn btn-outline-primary" @onclick="() => _calendarParams.SetCalendarStartToNextMonth(AppData.Settings.FirstDayOfWeek)"><i class="bi bi-chevron-double-right"></i></button>
            <button class="btn btn-outline-primary" @onclick="_calendarParams.SetCalendarStartToNextWeek"><i class="bi bi-chevron-double-down"></i></button>
        </div>
    }

    if (DisplayDayNames)
    {
        <div class="bg-body d-flex">
            @for (int i = 0; i < 7; i++)
            {
                string day = CalendarService.GetDayOfWeek(AppData.Settings.FirstDayOfWeek, i);
                <div @key="day" class="border d-flex" style="align-items: center; justify-content: center; height: 50px; width: 50px">@day</div>
            }
        </div>
    }

    @for (int week = 0; week < WeekCount; week++)
    {
        string display = DisplayBasedOnWidth ? $"d-none {_sizes[week]}" : "d-flex";
        <div class="@display">
            @for (int dayInWeek = 0; dayInWeek < 7; dayInWeek++)
            {
                DateTime dateTime = CalendarService.GetCalendarDay(_calendarParams.CalendarStart, week, dayInWeek); // if not captured locally, day becomes the last value used in the loop

                string text = dateTime.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday ? "text-warning" : "text-secondary";
                if (dateTime.Month == _calendarParams.FirstDayOfMonth.Month)
                    text += "-emphasis";
                string border = dateTime.Date == DateTime.Today.Date ? "border-4 border-primary" : "";

                if (Habit.TimesDoneByDay.TryGetValue(dateTime, out var list))
                {
                    <button class="@($"border {border} {text} d-flex bg-success")"
                         style="align-items: center; justify-content: center; height: 50px; width: 50px; line-height: normal; flex-direction: column;"
                         @onclick="() => AddTimeDone(dateTime)">
                        @dateTime.Day<small>(@list.Count)</small>
                    </button>
                }
                else
                {
                    <button class="@($"border {border} {text} d-flex bg-body-tertiary")"
                         style="align-items: center; justify-content: center; height: 50px; width: 50px; line-height: normal;"
                         @onclick="() => AddTimeDone(dateTime)">
                        @dateTime.Day
                    </button>
                }
            }
        </div>
    }
}

@code {
    [EditorRequired]
    [Parameter]
    public HabitModel? Habit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<HabitModel?> HabitChanged { get; set; }

    [Parameter]
    public bool DisplayMonth { get; set; }

    [Parameter]
    public bool DisplayDayNames { get; set; }

    [Parameter]
    public bool DisplayBasedOnWidth { get; set; }

    [Parameter]
    public int WeekCount { get; set; }

    string[] _sizes = { "d-lg-flex", "d-xl-flex", "d-xxl-flex", "", "", "" };

    CalendarParams _calendarParams = new();

    protected override async Task OnInitializedAsync()
    {
        await AppData.InitializeSettings();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_calendarParams.CalendarStart == DateTime.MinValue)
        {
            if (WeekCount == 1)
                _calendarParams.SetCalendarStartByFirstDayOfWeek(AppData.Settings.FirstDayOfWeek, DateTime.Today);
            else
                _calendarParams.SetCalendarStartByFirstDayOfMonth(AppData.Settings.FirstDayOfWeek, DateTime.Today);
        }

        if (Habit is not null && Habit.TimesDoneByDay is null)
        {
            await HabitService.LoadTimesDone(Habit);

            Habit.RefreshTimesDoneByDay();
        }
    }

    async Task AddTimeDone(DateTime dateTime)
    {
        if (dateTime > DateTime.Now)
            return;

        if (dateTime.Date == DateTime.Today.Date)
            dateTime = DateTime.Now;

        await HabitService.AddTimeDone(Habit!, dateTime);

        await HabitChanged.InvokeAsync(Habit);
    }
}