@using Ididit.Data.Models
@using Ididit.Services

@inject ItemService ItemService

<h3>ItemsComponent</h3>

@if (ItemService.NewItem is not null)
{
    <div>
        <label for="titleInput">Title:</label>
        <InputText id="titleInput" @bind-Value="ItemService.NewItem.Title" />

        <button @onclick="() => ItemService.AddItem(Items)">Add</button>
    </div>
}

@if (Items?.Items is not null)
{
    foreach (ItemModel item in Items.Items)
    {
        <div>
            <InputCheckbox Value="item.IsDone" ValueExpression="() => item.IsDone" ValueChanged="(bool done) => ItemService.SetIsDone(item, done)" />
            @if (item == ItemService.SelectedItem)
            {
                <InputText Value="@item.Title" ValueExpression="() => item.Title" ValueChanged="(string title) => ItemService.UpdateItem()" @onfocusout="(args) => ItemService.SelectedItem = null" />
            }
            else
            {
                <span @onclick="() => ItemService.SelectedItem = item">@item.Title</span>
            }
            <button @onclick="() => ItemService.DeleteItem(Items, item)">Delete</button>
        </div>
    }
}

@code {
    [EditorRequired]
    [Parameter]
    public ItemsModel? Items { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await ItemService.Initialize(Items);
    }
}
