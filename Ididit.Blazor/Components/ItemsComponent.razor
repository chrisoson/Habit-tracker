@using Ididit.Data.Models
@using Ididit.Services

@inject ItemService ItemService

@if (Items?.Items is not null)
{
    foreach (ItemModel item in Items.Items)
    {
        <div class="input-group flex-nowrap">
            <div class="input-group-text">
                <InputCheckbox id="@item.Id" class="form-check-input mt-0" Value="item.IsDone" ValueExpression="() => item.IsDone" ValueChanged="(bool done) => ItemService.SetIsDone(item, done)" />
            </div>
            @if (IsReadOnly)
            {
                <label for="@item.Id" class="input-group-text flex-grow-1 text-wrap">@item.Title</label>
            }
            else
            {
                if (item == ItemService.SelectedItem)
                {
                    <InputText class="form-control" @ref="inputElement" Value="@item.Title" ValueExpression="() => item.Title" ValueChanged="(string title) => ItemService.UpdateItem(title)" @onfocusout="(args) => ItemService.SelectedItem = null" />
                }
                else
                {
                    <button class="input-group-text flex-grow-1 text-wrap" @onclick="() => { ItemService.SelectedItem = item; shouldFocus = true; }">@item.Title</button>
                }
                <button class="btn btn-outline-primary" @onclick="() => ItemService.DeleteItem(Items, item)"><i class="bi bi-trash"></i></button>
            }
        </div>
    }
}

@if (!IsReadOnly && ItemService.NewItem is not null)
{
    <form @onsubmit=AddNewItem>
        <div class="input-group">
            <InputTextImmediate class="form-control" @bind-Value="ItemService.NewItem.Title" placeholder="Add new item" />

            <button class="btn btn-outline-primary" @onclick="() => ItemService.AddItem(Items)" disabled="@string.IsNullOrWhiteSpace(ItemService.NewItem.Title)"><i class="bi bi-plus-square"></i></button>
        </div>
    </form>
}

@code {
    [EditorRequired]
    [Parameter]
    public ItemsModel? Items { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    InputText? inputElement;

    bool shouldFocus;

    protected override async Task OnParametersSetAsync()
    {
        await ItemService.Initialize(Items);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldFocus && inputElement?.Element is not null)
        {
            shouldFocus = false;
            await inputElement.Element.Value.FocusAsync();
        }
    }

    async Task AddNewItem()
    {
        if (ItemService.NewItem is not null && !string.IsNullOrWhiteSpace(ItemService.NewItem.Title))
        {
            await ItemService.AddItem(Items);
        }
    }
}
