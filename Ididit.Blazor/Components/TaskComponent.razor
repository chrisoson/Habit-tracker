@using Ididit.Data.Models
@using Ididit.Services

@implements IDisposable

@inject TaskService TaskService
@inject IStringLocalizer<Loc> Loc

<div class="input-group flex-nowrap">
    <PriorityComponent Model="Task" />
    <InputText class="form-control" Value="@Task.Title" ValueExpression="() => Task.Title" ValueChanged="(string title) => SaveTitle(Task, title)" />
    <button class="btn btn-outline-primary" @onclick="async () => await CloseSelected.InvokeAsync()"><i class="bi bi-floppy"></i></button>
    <button class="btn btn-outline-primary" @onclick="async () => { await TaskService.DeleteTask(Task); await CloseSelected.InvokeAsync(); await ContentDeleted.InvokeAsync(); }"><i class="bi bi-trash"></i></button>
    <button class="@($"btn {(Task.CompletedAt is null ? "btn-outline-primary" : "btn-primary")}")" @onclick="() => TaskService.MarkAsDone(Task)"><i class="bi bi-check-square"></i></button>
</div>

<ItemsComponent Items=Task />

<div class="input-group">
    <span class="input-group-text">@Loc["Planned at"]</span>
    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="Task.PlannedAt" ValueExpression="() => Task.PlannedAt" ValueChanged="(DateTime? plannedAt) => SavePlannedAt(Task, plannedAt)" />
</div>

<div class="input-group">
    <label class="input-group-text" for="durationInput">@Loc["Duration"]</label>
    <InputDate class="form-control" id="durationInput" Value="Task.DurationProxy" ValueExpression="() => Task.DurationProxy" ValueChanged="(TimeOnly duration) => SaveDuration(Task, duration)" Type="InputDateType.Time" />
</div>

<div class="input-group flex-nowrap">
    @if (_timer is null)
    {
        <span class="input-group-text flex-grow-1">@Loc["Start timer"]</span>
        <button class="btn btn-outline-primary" @onclick="StartTimer"><i class="bi bi-play"></i></button>
    }
    else
    {
        <span class="input-group-text flex-grow-1">@_elapsedTime.ToString(@"hh\:mm\:ss")</span>
        <button class="btn btn-outline-primary" @onclick="ResetTimer"><i class="bi bi-arrow-counterclockwise"></i></button>
        <button class="btn btn-outline-primary" @onclick="StopTimer"><i class="bi bi-stop"></i></button>
    }
</div>

@if (Task.StartedAt is not null)
{
    @if (Task.CompletedAt is not null && Task.StartedAt != Task.CompletedAt)
    {
        <div class="p-1 border rounded-0">
            <div>@Loc["Time spent"]: @Task.TimeSpent?.ToString(@"hh\:mm\:ss")</div>
        </div>
    }

    <div class="p-1 border rounded-0">
        @if (Task.StartedAt != Task.CompletedAt)
        {
            <small class="d-inline-block mx-1">@Loc["Started"]: @Task.StartedAt</small>
        }
        @if (Task.CompletedAt is not null)
        {
            <small class="d-inline-block mx-1">@Loc["Completed"]: @Task.CompletedAt</small>
        }
    </div>
}

<div class="input-group flex-nowrap">
    <span class="input-group-text col-4">@Loc["Color"]</span>
    <ColorComponent Model="Task" />
</div>

<div class="input-group flex-nowrap">
    <span class="input-group-text col-4">@Loc["Category"]</span>
    <CategoryComponent Model="Task" />
</div>

<div class="p-1 border rounded-0">
    <small class="d-inline-block mx-1">@Loc["Created"]: @Task.CreatedAt</small>
    <small class="d-inline-block mx-1">@Loc["Updated"]: @Task.UpdatedAt</small>
</div>

@code {
    [EditorRequired]
    [Parameter]
    public TaskModel Task { get; set; } = null!;

    [Parameter]
    public EventCallback CloseSelected { get; set; }

    [CascadingParameter(Name = "ContentDeleted")]
    public EventCallback ContentDeleted { get; set; }

    PeriodicTimer? _timer;
    TimeSpan _elapsedTime;
    DateTime _taskStartedTime;

    async Task StartTimer()
    {
        if (Task is null)
            return;

        TimeSpan? duration = Task.Duration?.ToTimeSpan();

        await TaskService.Start(Task);

        _taskStartedTime = DateTime.Now;

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        while (_timer is not null && await _timer.WaitForNextTickAsync())
        {
            _elapsedTime = DateTime.Now - _taskStartedTime;

            if (duration is not null && _elapsedTime >= duration)
            {
                await StopTimer();
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    void ResetTimer()
    {
        _taskStartedTime = DateTime.Now;
    }

    async Task StopTimer()
    {
        if (Task is null || _timer is null)
            return;

        await TaskService.MarkAsDone(Task);

        _timer.Dispose();
        _timer = null;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    async Task SaveTitle(TaskModel task, string title)
    {
        task.Title = title;

        await TaskService.UpdateTask();
    }

    async Task SavePlannedAt(TaskModel task, DateTime? plannedAt)
    {
        task.PlannedAt = plannedAt;

        await TaskService.UpdateTask();
    }

    async Task SaveDuration(TaskModel task, TimeOnly duration)
    {
        task.DurationProxy = duration;

        await TaskService.UpdateTask();
    }
}
