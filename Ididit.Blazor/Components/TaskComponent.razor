@using Ididit.Data.Models
@using Ididit.Services

@inject TaskService TaskService

<div class="input-group flex-nowrap">
    <PriorityComponent Model="Task" />
    <InputText class="form-control" Value="@Task.Title" ValueExpression="() => Task.Title" ValueChanged="(string title) => SaveTitle(Task, title)" />
    <button class="btn btn-outline-primary" @onclick="() => CloseSelected.InvokeAsync()"><i class="bi bi-floppy"></i></button>
    <button class="btn btn-outline-primary" @onclick="() => TaskService.DeleteTask(Task)"><i class="bi bi-trash"></i></button>
    <button class="@($"btn {(Task.CompletedAt is null ? "btn-outline-primary" : "btn-primary")}")" @onclick="() => TaskService.MarkAsDone(Task)"><i class="bi bi-check-square"></i></button>
</div>

<ItemsComponent Items=Task />

<div class="input-group">
    <span class="input-group-text">Planned at</span>
    <InputDate class="form-control" Type="InputDateType.DateTimeLocal" Value="Task.PlannedAt" ValueExpression="() => Task.PlannedAt" ValueChanged="(DateTime? plannedAt) => SavePlannedAt(Task, plannedAt)" />
</div>

<div class="input-group">
    <label class="input-group-text" for="durationInput">Duration</label>
    <InputDate class="form-control" id="durationInput" Value="Task.DurationProxy" ValueExpression="() => Task.DurationProxy" ValueChanged="(TimeOnly duration) => SaveDuration(Task, duration)" Type="InputDateType.Time" />
</div>

<div class="input-group flex-nowrap">
    <span class="input-group-text flex-grow-1">Start timer</span>
    <button class="btn btn-outline-primary" @onclick="() => {}"><i class="bi bi-play"></i></button>
    <button class="btn btn-outline-primary" @onclick="() => {}"><i class="bi bi-pause"></i></button>
    <button class="btn btn-outline-primary" @onclick="() => {}"><i class="bi bi-stop"></i></button>
</div>

@if (Task.StartedAt is not null)
{
    @if (Task.CompletedAt is not null && Task.StartedAt != Task.CompletedAt)
    {
        <div class="p-1 border rounded-0">
            <div>Time spent: @Task.TimeSpent?.ToString(@"hh\:mm\:ss")</div>
        </div>
    }

    <div class="p-1 border rounded-0">
        @if (Task.StartedAt != Task.CompletedAt)
        {
            <small class="d-inline-block mx-1">Started: @Task.StartedAt</small>
        }
        @if (Task.CompletedAt is not null)
        {
            <small class="d-inline-block mx-1">Completed: @Task.CompletedAt</small>
        }
    </div>
}

<CategoryComponent Model="Task" />

<div class="p-1 border rounded-0">
    <small class="d-inline-block mx-1">Created: @Task.CreatedAt</small>
    <small class="d-inline-block mx-1">Updated: @Task.UpdatedAt</small>
</div>

@code {
    [EditorRequired]
    [Parameter]
    public TaskModel Task { get; set; }

    [Parameter]
    public EventCallback CloseSelected { get; set; }

    async Task SaveTitle(TaskModel task, string title)
    {
        task.Title = title;

        await TaskService.UpdateTask();
    }

    async Task SavePlannedAt(TaskModel task, DateTime? plannedAt)
    {
        task.PlannedAt = plannedAt;

        await TaskService.UpdateTask();
    }

    async Task SaveDuration(TaskModel task, TimeOnly duration)
    {
        task.DurationProxy = duration;

        await TaskService.UpdateTask();
    }
}
